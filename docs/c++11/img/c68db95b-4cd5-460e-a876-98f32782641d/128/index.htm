<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=unicode">
<title>《第8讲 友元，引用计数》</title>
    <!--mark |wiz_custom_css| for wizeditor replace it-->
<link rel="stylesheet" name="wiz_tmp_editor_style" href="index_files/fonts_431.css"><link rel="stylesheet" name="wiz_tmp_editor_style" href="index_files/fonts_692.css"><link rel="stylesheet" name="wiz_tmp_editor_style" href="index_files/fonts_699.css"><link rel="stylesheet" name="wiz_tmp_editor_style" href="index_files/fonts_702.css"><link rel="stylesheet" name="wiz_tmp_editor_style" href="index_files/fonts_726.css"><link rel="stylesheet"  name="wiz_tmp_editor_style" href="index_files/fonts_731.css"><link type="text/css" rel="stylesheet" id="wiz_code_highlight_link" href="index_files/wiz_code_highlight_575.css"><style id="wiz_custom_css">html, .wiz-editor-body {font-size: 12pt;}.wiz-editor-body {font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;line-height: 1.7;margin: 0 auto;position:relative;padding: 20px 16px;}.wiz-editor-body h1,.wiz-editor-body h2,.wiz-editor-body h3,.wiz-editor-body h4,.wiz-editor-body h5,.wiz-editor-body h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}.wiz-editor-body h1 {font-size:20pt;font-size:1.67rem;}.wiz-editor-body h2 {font-size:18pt;font-size:1.5rem;}.wiz-editor-body h3 {font-size:15pt;font-size:1.25rem;}.wiz-editor-body h4 {font-size:14pt;font-size:1.17rem;}.wiz-editor-body h5 {font-size:12pt;font-size:1rem;}.wiz-editor-body h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}.wiz-editor-body div,.wiz-editor-body p,.wiz-editor-body ul,.wiz-editor-body ol,.wiz-editor-body dl,.wiz-editor-body li {margin:8px 0 0;}.wiz-editor-body blockquote,.wiz-editor-body table,.wiz-editor-body pre,.wiz-editor-body code {margin:8px 0;}.wiz-editor-body .CodeMirror pre {margin:0;}.wiz-editor-body a {word-wrap: break-word;text-decoration-skip-ink: none;}.wiz-editor-body ul,.wiz-editor-body ol {padding-left:32px;padding-left:2rem;}.wiz-editor-body ol.wiz-list-level1 > li {list-style-type:decimal;}.wiz-editor-body ol.wiz-list-level2 > li {list-style-type:lower-latin;}.wiz-editor-body ol.wiz-list-level3 > li {list-style-type:lower-roman;}.wiz-editor-body li.wiz-list-align-style {list-style-position: inside; margin-left: -1em;}.wiz-editor-body blockquote {padding: 0 12px;}.wiz-editor-body blockquote > :first-child {margin-top:0;}.wiz-editor-body blockquote > :last-child {margin-bottom:0;}.wiz-editor-body img {border:0;max-width:100%;height:auto !important;margin:2px 0;padding: 2px;vertical-align:bottom;}.wiz-editor-body table {border-collapse:collapse;border:1px solid #a7afbc;}.wiz-editor-body td,.wiz-editor-body th {padding:4px 8px;border-collapse:collapse;border:1px solid #a7afbc;min-height:28px;word-break:break-word;box-sizing: border-box;}.wiz-editor-body td > div:first-child {margin-top:0;}.wiz-editor-body td > div:last-child {margin-bottom:0;}.wiz-editor-body img.wiz-svg-image {box-shadow:1px 1px 4px #E8E8E8;}.wiz-editor-body .wiz-image-container {margin:0;max-width: 100%;display: inline-flex;flex-direction: column;}.wiz-editor-body .wiz-image-container .wiz-image-title {display:inline-block;text-align: center;color: #a7afbc;line-height: 18px;font-size: 12px;min-height: 18px;width: 100%;white-space: normal;}.wiz-hide {display:none !important;}.wiz-editor-body.wiz-editor-outline {padding-right:0; padding-left:0;}.wiz-editor-body.wiz-editor-outline .outline-container {margin:0; padding:0; line-height:1.5;}.wiz-editor-body.wiz-editor-outline .outline-container div {margin:0;}.wiz-editor-body.wiz-editor-outline .node {margin:0; padding: 0;}.wiz-editor-body.wiz-editor-outline .outline-container > .node {margin-right:24px; margin-left:30px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .children {display:none;}.wiz-editor-body.wiz-editor-outline .node .row {position:relative; padding-left:26px;}.wiz-editor-body.wiz-editor-outline .node .operator-container {width:36px;position:absolute; top:4px; left:-18px;}.wiz-editor-body.wiz-editor-outline .node .operator-bar {position:absolute; top:0; left:0; right:0; bottom:0; display:flex; align-items:center; justify-content:center;}.wiz-editor-body.wiz-editor-outline .node .switch {width:18px; height:18px;display:flex;flex-direction: column;align-items: center;overflow: hidden;}.wiz-editor-body.wiz-editor-outline .node .switch i {font-size:20px;position:relative;left:-1px;top:-1px;}.wiz-editor-body.wiz-editor-outline .node .switch.active {cursor:pointer;color:transparent; transition:transform 200ms ease 0s;}.wiz-editor-body.wiz-editor-outline .node.collapsed .switch.active {transform:rotateZ(-90deg);}.wiz-editor-body.wiz-editor-outline .node .row:hover .switch.active {color:#505F79}.wiz-editor-body.wiz-editor-outline .node .dot {display:flex; align-items:center; justify-content:center; border-radius:100%; width:18px; height:18px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .dot {background-color:rgba(80, 95, 121, .15);}.wiz-editor-body.wiz-editor-outline .node .dot-icon {background-color:#505F79; border-radius:100%; width:6px; height:6px;}.wiz-editor-body.wiz-editor-outline .node .child {margin-left:8px; border-left:1px solid #E6E9ED; padding-left:17px;}.wiz-editor-body.wiz-editor-outline .node .content {flex:1;outline:none; padding:4px 0;}.wiz-editor-body.wiz-editor-outline .node div.content {font-size:1rem;}.wiz-editor-body.wiz-editor-outline .node.complete > .row .content {text-decoration:line-through;color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .notes {outline:none; font-size:.8rem; color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .image {outline:none; padding-top:4px; padding-bottom:4px;}.wiz-editor-body.wiz-editor-outline .outline-container h1,.wiz-editor-body.wiz-editor-outline .outline-container h2,.wiz-editor-body.wiz-editor-outline .outline-container h3,.wiz-editor-body.wiz-editor-outline .outline-container h4,.wiz-editor-body.wiz-editor-outline .outline-container h5,.wiz-editor-body.wiz-editor-outline .outline-container h6 {margin:0;}body, .wiz-editor-body {  padding-left: 48px;  padding-right: 48px;}</style><style name="wiz_unsave_style">html, .wiz-editor-body {    font-size: 12pt;}body, .wiz-editor-body {    font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;    line-height: 1.7 !important;    color: inherit;    background-color: #ffffff;}img{    max-width: 100%;}.wiz-todo-main{	line-height: 1.7 !important;}</style><style name="wiz_unsave_style">body::-webkit-scrollbar {width: 16px;height: 16px;background-color: #f0f0f0;border: none;}body::-webkit-scrollbar-thumb {background-color: #dcdcdc;}body::-webkit-scrollbar-thumb:hover {background-color: #c0c0c0;}body::-webkit-scrollbar-thumb:active {background-color: #969696;}body::-webkit-scrollbar-thumb:disabled {background-color: #f9f9f9;}body::_webkit_scrollbar-track {background-color: #ffffff;}body::-webkit-scrollbar-corner {background-color: #f0f0f0;}body::-webkit-scrollbar-button {\*  display: none;*\}body.flat-scrollbar::-webkit-scrollbar,body.flat-scrollbar div::-webkit-scrollbar,body.flat-scrollbar ul::-webkit-scrollbar,body.flat-scrollbar aside::-webkit-scrollbar,body.flat-scrollbar iframe::-webkit-scrollbar {width: 12px;height: 12px;}</style><script type="text/javascript" src="file:///C:/Program%20Files%20(x86)/WizNote/WizTools/htmleditor/editorHelper.js" wiz_style="unsave" charset="utf-8" defer></script><script type="text/javascript" src="file:///C:/Users/Halo/Documents/My%20Knowledge/templates/WizTemplate.js" wiz_style="unsave" charset="utf-8" defer></script><script type="text/javascript" src="file:///C:/Program%20Files%20(x86)/WizNote/WizTools/htmleditor/core/wizEditorForPc.js" wiz_style="unsave" charset="utf-8" defer></script><script type="text/javascript" wiz_style="unsave" charset="utf-8">document.addEventListener('DOMContentLoaded', function handler(){
	if(window.external){
		try{
			window.WizChromeBrowser.Execute("Wiz_DOMContentLoaded", null, null, null, null);
		}catch(err){
			console.error(err);
		}
	}
	document.removeEventListener('DOMContentLoaded', handler, false);
}, false);</script></head>

<body spellcheck="false" ><h1 align="center" style="text-align:center;"><b><span style="font-family: 黑体; font-size: 22pt;"><font face="黑体">《第</font>8讲 友元，引用计数》</span></b><b><span style="font-family: 黑体; font-size: 22pt;"><o:p></o:p></span></b></h1><p class="MsoNormal"><span style="font-family:黑体;font-size:16.0000pt;mso-font-kerning:1.0000pt;">一、</span><span style="mso-spacerun:'yes';font-family:黑体;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="黑体">教学目标</font></span><span style="mso-spacerun:'yes';font-family:黑体;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;">	</span><span style="font-family: 宋体; font-size: 11pt;">1<font face="宋体">、</font></span><span style="font-family: Helvetica; font-size: 11pt;"><font face="Helvetica">掌握</font></span><span style="font-family: 宋体; font-size: 11pt;"><font face="宋体">友元的使用</font></span><span style="font-family: 宋体; font-size: 11pt;"><o:p></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="font-family: 宋体; font-size: 11pt;">	</span><span style="font-family: 宋体; font-size: 11pt;">2<font face="宋体">、掌握引用计数设计</font></span><span style="font-family: 宋体; font-size: 11pt;"><o:p></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="font-family: 宋体; font-size: 11pt;">	</span><span style="font-family: 宋体; font-size: 11pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:黑体;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="黑体">二、难点</font></span><span style="font-family: Helvetica; font-size: 11pt;"><o:p></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="font-family: Helvetica; font-size: 11pt;">&nbsp; &nbsp; &nbsp; </span><b><span style="font-family: 楷体; font-size: 15pt;"><font face="楷体">难点</font></span></b><span style="font-family: Helvetica; font-size: 11pt;"><o:p></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="font-family: 宋体; font-size: 11pt;">	</span><span style="font-family: 宋体; font-size: 11pt;">(1) </span><span style="font-family: Helvetica; font-size: 11pt;"><font face="Helvetica">掌握</font></span><span style="mso-spacerun:'yes';font-family:黑体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="黑体">友元的使用场合</font></span><span style="mso-spacerun:'yes';font-family:黑体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:黑体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">	</span><span style="mso-spacerun:'yes';font-family:黑体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">(2) 掌握引用计数的概念</span><span style="mso-spacerun:'yes';font-family:黑体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:黑体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:黑体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="font-family: Helvetica; font-size: 11pt;">&nbsp;</span><span style="mso-spacerun:'yes';font-family:黑体;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="黑体">三</font></span><span style="mso-spacerun:'yes';font-family:黑体;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="黑体">、教学过程</font></span><span style="font-family: Helvetica; font-size: 11pt;"><o:p></o:p></span></p><div class="wiz-table-container" style="position: relative; padding: 15px 0px 5px;"><div class="wiz-table-body"><table class="MsoNormalTable" style="width: 426.1pt;"><tbody><tr style="height:639.1000pt;"><td width="106" valign="top" style="width: 79.6pt; padding: 0pt 5.4pt; border-width: 1pt; border-color: windowtext;" class=""><p class="MsoNormal" align="center" style="text-align:center;"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">纲要</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" align="center" style="text-align:center;"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: Helvetica; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;">友元的使用</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;">引用计数设计<font face="Helvetica">1</font></span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;">引用计数设计<font face="Helvetica">2</font></span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p></td><td width="320" valign="top" style="width: 240pt; padding: 0pt 5.4pt; border-left-style: none; border-right-width: 1pt; border-right-color: windowtext; border-top-width: 1pt; border-top-color: windowtext; border-bottom-width: 1pt; border-bottom-color: windowtext;" class=""><p class="MsoNormal" align="center" style="text-align:center;"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">教学内容</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">一、&nbsp;</span><span style="font-family: 宋体; font-size: 11pt;">友元的使用</span><span style="font-family: 宋体; font-size: 11pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">1.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明友元全局函数的使用</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">2.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明友元成员函数的使用</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">3.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明说明友元类的使用</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">4.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明友元的使用场合</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="line-height: 13.5pt;"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal" style="line-height: 13.5pt;"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">二、&nbsp;</span><span style="font-family: 宋体; font-size: 11pt;">引用计数设计<font face="Helvetica">1</font></span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">1.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明深拷贝、浅拷贝的概念</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">2.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明浅拷贝内存重复释放问题</span><span style="font-family: 宋体; font-size: 11pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">3.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明</span><span style="font-family: 宋体; font-size: 11pt;">实例化一个对象的引用计数设计</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">4.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明</span><span style="font-family: 宋体; font-size: 11pt;">实例化多个个对象的引用计数设计</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">三、&nbsp;</span><span style="font-family: 宋体; font-size: 11pt;">引用计数设计<font face="Helvetica">2</font></span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">1.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明</span><span style="font-family: 宋体; font-size: 11pt;">实例化多个个对象的引用计数设计</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">2.&nbsp;</span><span style="font-family: 宋体; font-size: 11pt;">举例说明写时拷贝的设计</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt;"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p></td><td width="142" valign="top" style="width: 106.5pt; padding: 0pt 5.4pt; border-left-style: none; border-right-width: 1pt; border-right-color: windowtext; border-top-width: 1pt; border-top-color: windowtext; border-bottom-width: 1pt; border-bottom-color: windowtext;" class=""><p class="MsoNormal" align="center" style="text-align:center;"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">时间分配</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" align="center" style="text-align:center;"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">及课堂要点记录</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" align="center" style="text-align:center;"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family: Helvetica; font-size: 11pt;">（</span><span style="font-family: 宋体; font-size: 10.5pt;">20分钟）</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: Helvetica; font-size: 11pt;">（</span><span style="font-family: 宋体; font-size: 10.5pt;">70分钟）</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: Helvetica; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: Helvetica; font-size: 11pt;">（</span><span style="font-family: 宋体; font-size: 10.5pt;">70分钟）</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family: Helvetica; font-size: 11pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family: 宋体; font-size: 10.5pt;"><o:p>&nbsp;</o:p></span></p></td></tr></tbody></table></div></div><p class="MsoNormal" style="line-height: 18.95pt;"><span style="line-height: 25.2667px; font-family: 黑体; font-size: 16pt;"><font face="黑体"><br></font></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="line-height: 25.2667px; font-family: 黑体; font-size: 16pt;"><font face="黑体"></font></span><span style="line-height: 25.2667px; font-family: 黑体; font-size: 16pt;"><font face="黑体">四、教学大纲</font></span><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="text-indent: -21pt; font-family: 宋体; font-size: 11pt;">一、&nbsp;</span><span style="text-indent: -21pt; font-family: 宋体; font-size: 11pt;">友元的使用</span><br></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp; &nbsp;[提问：]成员函数运算符重载和非成员函数运算符重载中，有一个很关键的区别：</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp; &nbsp; 就是在非成员运算符重载函数中，不能直接使用类的私有成员，必须调用接口函数。</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp; &nbsp;</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp;&nbsp;</span><img src="index_files/3576364a-41c8-41f8-a15c-8187889b7ca1.png" border="0" style="line-height: 1.6;"></p><div>&nbsp;</div><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp; &nbsp;但是可以把全局函数声明为类的友元。</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp; &nbsp;如果，把函数或者操作符声明为友元，一个类可以授予这个函数或者操作符访问其非公有成员的权利。</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp; &nbsp;友元可以分为3类：</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp; &nbsp;1.友元全局函数。</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp; &nbsp;2.友元成员函数。</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">&nbsp; &nbsp;3.友元类。</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><br></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">1.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明友元全局函数的使用</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><img src="index_files/bda6ab84-0036-4245-bab0-3d98516a31aa.png" border="0"></p><div>&nbsp;</div><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">2.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明友元成员函数的使用</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><img src="index_files/6181b24b-d34f-46ce-a712-f88d41c47ea4.png" border="0"></p><div>&nbsp;</div><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">3.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明说明友元类的使用</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><img src="index_files/b1c55fdd-c6b4-47c8-9a08-cdbd67761689.jpg" border="0"></p><div>&nbsp;</div><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">4.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明友元的使用场合</span></p><p class="MsoNormal" style="text-indent:32.0000pt;mso-char-indent-count:2.0000;"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="仿宋">作用</font>: 可以访问一个类的私有成员。</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" style="text-indent:32.0000pt;mso-char-indent-count:2.0000;"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="仿宋">缺点：破坏了类的封装性和数据的隐藏性。</font></span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" style="text-indent:32.0000pt;mso-char-indent-count:2.0000;"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="仿宋">用途</font>: 不推荐使用，在某些方面，如运算符重载和某些软件设计时可酌情使用。</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">二、&nbsp;</span><span style="font-family: 宋体; font-size: 11pt;">引用计数设计<font face="Helvetica">1</font></span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">1.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明深拷贝、浅拷贝的概念</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="仿宋">（</font>1）、深拷贝优缺点：</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;">	</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="仿宋">（</font>a）优点：每一个的对象（哪怕是通过拷贝构造函数实例化的对象）的指针都有指向的内存空间，而不是共享，所以在对象析构的时候就不存在重复释放或内存泄露的问题了。</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;">	</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;">&nbsp;(b)缺点：内存开销大</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="仿宋">（</font>2）、浅拷贝优缺点：</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;">	</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="仿宋">（</font>a）优点：通过拷贝构造函数实例化的对象的指针数据变量指向的共享的内存空间，因此内存开销较小。</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;">	</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;">&nbsp;(b)缺点：对象析构的时候就可能会重复释放或造成内存泄露。</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;">	</span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="仿宋">鉴于深拷贝和浅拷贝的优缺点，可采用</font></span><b><span style="font-family: 仿宋; font-size: 16pt;"><font face="仿宋">引用计数</font></span></b><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><font face="仿宋">技术，既减小了内存开销，又避免了堆的重复释放或内存泄露问题。</font></span><span style="mso-spacerun:'yes';font-family:仿宋;font-size:16.0000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="text-indent: -21pt; font-family: 宋体; font-size: 10.5pt;">2.&nbsp;</span><span style="text-indent: -21pt; font-family: 宋体; font-size: 10.5pt;">举例说明浅拷贝内存重复释放问题</span><br></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;"><br></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><br></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">3.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明</span><span style="font-family: 宋体; font-size: 11pt;">实例化一个对象的引用计数设计</span><span style="font-family: 宋体; font-size: 10.5pt;"><o:p></o:p></span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;">（1）在<span style="line-height: 25.2632px;">深拷贝的情况下，通过拷贝构造或者赋值构造的</span><span style="text-indent: -21pt; line-height: 1.6;">对象均各自包含自己的指针指向“Hello”。</span></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><img src="index_files/e8a2b742-9bc7-477e-9a17-29e2a2ee65e6.jpg" border="0"></p><div>&nbsp;（2）但是，显然这样比较浪费内存，存在冗余，那么下面的版本更好：</div><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;">&nbsp; &nbsp; &nbsp;<img src="index_files/b591b3ae-c396-452e-8b7a-2419db02ae40.jpg" border="0" class=""></p><div>&nbsp; &nbsp; &nbsp; 实现代码如下：</div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-py"><span class="com">#include "stdafx.h"</span></code></li><li class="L1"><code class="language-py"><span class="com">#include &lt;iostream.h&gt;</span></code></li><li class="L2"><code class="language-py"><span class="com">#include &lt;cstring&gt;</span></code></li><li class="L3"><code class="language-py"></code></li><li class="L4"><code class="language-py"><span class="kwd">class</span><span class="pln"> </span><span class="typ">CStudent</span></code></li><li class="L5"><code class="language-py"><span class="pun">{</span></code></li><li class="L6"><code class="language-py"><span class="pln">public</span><span class="pun">:</span></code></li><li class="L7"><code class="language-py"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">(</span><span class="pln">const char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L8"><code class="language-py"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">);</span></code></li><li class="L9"><code class="language-py"></code></li><li class="L0"><code class="language-py"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> operator</span><span class="pun">=(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">);</span></code></li><li class="L1"><code class="language-py"></code></li><li class="L2"><code class="language-py"><span class="pln">	void release</span><span class="pun">();</span></code></li><li class="L3"><code class="language-py"></code></li><li class="L4"><code class="language-py"><span class="pln">	void </span><span class="typ">Show</span><span class="pun">()</span></code></li><li class="L5"><code class="language-py"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L6"><code class="language-py"><span class="pln">		cout </span><span class="pun">&lt;&lt;</span><span class="pln"> hex </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">int</span><span class="pun">&amp;)</span><span class="pln">m_pszName </span><span class="pun">&lt;&lt;</span><span class="pln"> m_pszName </span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L7"><code class="language-py"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L8"><code class="language-py"></code></li><li class="L9"><code class="language-py"><span class="pln">private</span><span class="pun">:</span></code></li><li class="L0"><code class="language-py"><span class="pln">    char</span><span class="pun">*</span><span class="pln"> m_pszName</span><span class="pun">;</span><span class="pln">	</span></code></li><li class="L1"><code class="language-py"><span class="pun">};</span></code></li><li class="L2"><code class="language-py"></code></li><li class="L3"><code class="language-py"></code></li><li class="L4"><code class="language-py"><span class="typ">CStudent</span><span class="pun">::</span><span class="typ">CStudent</span><span class="pun">(</span><span class="pln">const char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">)</span></code></li><li class="L5"><code class="language-py"><span class="pun">{</span></code></li><li class="L6"><code class="language-py"><span class="pln">	m_pszName </span><span class="pun">=</span><span class="pln"> new char</span><span class="pun">[</span><span class="lit">256</span><span class="pun">];</span></code></li><li class="L7"><code class="language-py"></code></li><li class="L8"><code class="language-py"><span class="pln">	strcpy</span><span class="pun">(</span><span class="pln">m_pszName</span><span class="pun">,</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L9"><code class="language-py"><span class="pun">}</span></code></li><li class="L0"><code class="language-py"></code></li><li class="L1"><code class="language-py"></code></li><li class="L2"><code class="language-py"><span class="typ">CStudent</span><span class="pun">::</span><span class="typ">CStudent</span><span class="pun">(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">)</span></code></li><li class="L3"><code class="language-py"><span class="pun">{</span></code></li><li class="L4"><code class="language-py"><span class="pln">	m_pszName </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pszName</span><span class="pun">;</span></code></li><li class="L5"><code class="language-py"><span class="pln">	</span></code></li><li class="L6"><code class="language-py"><span class="pln">	</span><span class="pun">//</span><span class="pln">strcpy</span><span class="pun">(</span><span class="pln">m_pszName</span><span class="pun">,</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pszName</span><span class="pun">);</span></code></li><li class="L7"><code class="language-py"><span class="pun">}</span></code></li><li class="L8"><code class="language-py"></code></li><li class="L9"><code class="language-py"></code></li><li class="L0"><code class="language-py"><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> </span><span class="typ">CStudent</span><span class="pun">::</span><span class="pln">operator</span><span class="pun">=(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">)</span></code></li><li class="L1"><code class="language-py"><span class="pun">{</span></code></li><li class="L2"><code class="language-py"><span class="pln">	m_pszName </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pszName</span><span class="pun">;</span></code></li><li class="L3"><code class="language-py"></code></li><li class="L4"><code class="language-py"><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="pln">this</span><span class="pun">;</span></code></li><li class="L5"><code class="language-py"><span class="pun">}</span></code></li><li class="L6"><code class="language-py"></code></li><li class="L7"><code class="language-py"><span class="pln">void </span><span class="typ">CStudent</span><span class="pun">::</span><span class="pln">release</span><span class="pun">()</span></code></li><li class="L8"><code class="language-py"><span class="pun">{</span></code></li><li class="L9"><code class="language-py"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">m_pszName </span><span class="pun">!=</span><span class="pln"> NULL</span><span class="pun">)</span></code></li><li class="L0"><code class="language-py"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L1"><code class="language-py"><span class="pln">		delete m_pszName</span><span class="pun">;</span></code></li><li class="L2"><code class="language-py"><span class="pln">		m_pszName </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L3"><code class="language-py"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L4"><code class="language-py"><span class="pun">}</span></code></li><li class="L5"><code class="language-py"></code></li><li class="L6"><code class="language-py"><span class="pln">int main</span><span class="pun">(</span><span class="pln">int argc</span><span class="pun">,</span><span class="pln"> char</span><span class="pun">*</span><span class="pln"> argv</span><span class="pun">[])</span></code></li><li class="L7"><code class="language-py"><span class="pun">{</span></code></li><li class="L8"><code class="language-py"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu1</span><span class="pun">(</span><span class="str">"zhang san"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-py"></code></li><li class="L0"><code class="language-py"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu2</span><span class="pun">(</span><span class="str">"li si"</span><span class="pun">);</span></code></li><li class="L1"><code class="language-py"></code></li><li class="L2"><code class="language-py"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu3 </span><span class="pun">=</span><span class="pln"> stu2</span><span class="pun">;</span></code></li><li class="L3"><code class="language-py"></code></li><li class="L4"><code class="language-py"></code></li><li class="L5"><code class="language-py"><span class="pln">	stu1</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L6"><code class="language-py"><span class="pln">	stu2</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L7"><code class="language-py"><span class="pln">	stu3</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L8"><code class="language-py"></code></li><li class="L9"><code class="language-py"><span class="pln">	stu2</span><span class="pun">.</span><span class="pln">release</span><span class="pun">();</span></code></li><li class="L0"><code class="language-py"></code></li><li class="L1"><code class="language-py"><span class="pln">	stu3</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L2"><code class="language-py"></code></li><li class="L3"><code class="language-py"><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L4"><code class="language-py"><span class="pun">}</span></code></li></ol></pre></div><div>&nbsp; &nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp;但是这样同样存在问题，一旦其中一个对象释放了资源，那么所有的其他对象的资源也被释放了。</div><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><font face="宋体"><span style="font-size: 14px; line-height: 23.5789px;">&nbsp;解决方法：增加一个变量，记录资源使用的次数。</span></font></p><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><img src="index_files/8599e958-d7e4-413b-aca1-a26ad2932b12.jpg" border="0"></p><div>&nbsp;实现：</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-cpp"><span class="com">#include</span><span class="pln"> </span><span class="str">"stdafx.h"</span></code></li><li class="L1"><code class="language-cpp"><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iostream.h&gt;</span></code></li><li class="L2"><code class="language-cpp"><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;cstring&gt;</span></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"><span class="kwd">class</span><span class="pln"> </span><span class="typ">CStudent</span></code></li><li class="L5"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L6"><code class="language-cpp"><span class="kwd">public</span><span class="pun">:</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">);</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="pln">	</span><span class="pun">~</span><span class="typ">CStudent</span><span class="pun">();</span></code></li><li class="L1"><code class="language-cpp"></code></li><li class="L2"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">=(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">);</span></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> release</span><span class="pun">();</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Show</span><span class="pun">()</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">		</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">m_pCount </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L9"><code class="language-cpp"><span class="pln">		</span><span class="pun">{</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">			cout </span><span class="pun">&lt;&lt;</span><span class="pln"> hex </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pun">&amp;)</span><span class="pln">m_pszName </span><span class="pun">&lt;&lt;</span><span class="pln"> m_pszName </span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">		</span><span class="pun">}</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"><span class="kwd">private</span><span class="pun">:</span></code></li><li class="L5"><code class="language-cpp"><span class="pln">    </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> m_pszName</span><span class="pun">;</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="typ">int</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> m_pCount</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pun">};</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">::</span><span class="typ">CStudent</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">)</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	m_pszName </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[</span><span class="lit">256</span><span class="pun">];</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">	m_pCount  </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">int</span><span class="pun">;</span></code></li><li class="L4"><code class="language-cpp"></code></li><li class="L5"><code class="language-cpp"><span class="pln">	strcpy</span><span class="pun">(</span><span class="pln">m_pszName</span><span class="pun">,</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L6"><code class="language-cpp"></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="pun">*</span><span class="pln">m_pCount </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span></code></li><li class="L8"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"></code></li><li class="L1"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">::</span><span class="typ">CStudent</span><span class="pun">(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">)</span></code></li><li class="L2"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">	m_pszName </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pszName</span><span class="pun">;</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span></code></li><li class="L5"><code class="language-cpp"><span class="pln">	m_pCount </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pCount</span><span class="pun">;</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="pun">(*</span><span class="pln">m_pCount</span><span class="pun">)++;</span></code></li><li class="L7"><code class="language-cpp"></code></li><li class="L8"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">::~</span><span class="typ">CStudent</span><span class="pun">()</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	release</span><span class="pun">();</span></code></li><li class="L3"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L4"><code class="language-cpp"></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> </span><span class="typ">CStudent</span><span class="pun">::</span><span class="kwd">operator</span><span class="pun">=(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">)</span></code></li><li class="L7"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="pln">m_pszName </span><span class="pun">==</span><span class="pln"> m_pszName</span><span class="pun">)</span></code></li><li class="L9"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(--(*</span><span class="pln">m_pCount</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L5"><code class="language-cpp"><span class="pln">		</span><span class="kwd">delete</span><span class="pln"> m_pszName</span><span class="pun">;</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">		m_pszName </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">		</span><span class="kwd">delete</span><span class="pln"> m_pCount</span><span class="pun">;</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L0"><code class="language-cpp"></code></li><li class="L1"><code class="language-cpp"><span class="pln">	m_pszName </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pszName</span><span class="pun">;</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	m_pCount </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pCount</span><span class="pun">;</span></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="pun">(*</span><span class="pln">m_pCount</span><span class="pun">)++;</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="kwd">void</span><span class="pln"> </span><span class="typ">CStudent</span><span class="pun">::</span><span class="pln">release</span><span class="pun">()</span></code></li><li class="L0"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">m_pszName </span><span class="pun">!=</span><span class="pln"> NULL </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">--*</span><span class="pln">m_pCount </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">		</span><span class="kwd">delete</span><span class="pln"> m_pszName</span><span class="pun">;</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">		m_pszName </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">		</span><span class="kwd">delete</span><span class="pln"> m_pCount</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L8"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="typ">int</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> argc</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> argv</span><span class="pun">[])</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu1</span><span class="pun">(</span><span class="str">"zhang san"</span><span class="pun">);</span></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu2</span><span class="pun">(</span><span class="str">"li si"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu3 </span><span class="pun">=</span><span class="pln"> stu2</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="pln">	stu1</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">	stu2</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">	stu3</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="pln">	stu2</span><span class="pun">.</span><span class="pln">release</span><span class="pun">();</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	stu3</span><span class="pun">.</span><span class="pln">release</span><span class="pun">();</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">	stu3</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L7"><code class="language-cpp"></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L9"><code class="language-cpp"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 10.5pt;">4.&nbsp;</span><span style="font-family: 宋体; font-size: 10.5pt;">举例说明</span><span style="font-family: 宋体; font-size: 11pt;">实例化多个个对象的引用计数设计</span></p><p class="MsoNormal" style="line-height: 18.95pt;">&nbsp; &nbsp; &nbsp; &nbsp;可以考虑将引用计数和资源绑在一起，形成一个新的类。</p><p class="MsoNormal" style="line-height: 18.95pt;">&nbsp; &nbsp; &nbsp; &nbsp;</p><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-cpp"><span class="com">// Student.cpp : Defines the entry point for the console application.</span></code></li><li class="L1"><code class="language-cpp"><span class="com">//</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="com">#include</span><span class="pln"> </span><span class="str">"stdafx.h"</span></code></li><li class="L4"><code class="language-cpp"><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iostream.h&gt;</span></code></li><li class="L5"><code class="language-cpp"><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;cstring&gt;</span></code></li><li class="L6"><code class="language-cpp"></code></li><li class="L7"><code class="language-cpp"><span class="kwd">struct</span><span class="pln"> </span><span class="typ">RefValue</span><span class="pln"> </span></code></li><li class="L8"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="pln">	</span><span class="typ">RefValue</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="pun">~</span><span class="typ">RefValue</span><span class="pun">();</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> </span><span class="typ">AddRef</span><span class="pun">();</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Release</span><span class="pun">();</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> m_pszName</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="typ">int</span><span class="pln">   m_nCount</span><span class="pun">;</span></code></li><li class="L8"><code class="language-cpp"><span class="pun">};</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="typ">RefValue</span><span class="pun">::</span><span class="typ">RefValue</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">)</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	m_pszName </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[</span><span class="pln">strlen</span><span class="pun">(</span><span class="pln">pszName</span><span class="pun">)+</span><span class="lit">1</span><span class="pun">];</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">	</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	m_nCount </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L7"><code class="language-cpp"></code></li><li class="L8"><code class="language-cpp"><span class="typ">RefValue</span><span class="pun">::~</span><span class="typ">RefValue</span><span class="pun">()</span></code></li><li class="L9"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L0"><code class="language-cpp"></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">m_pszName </span><span class="pun">!=</span><span class="pln"> NULL</span><span class="pun">)</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">		</span><span class="kwd">delete</span><span class="pln"> m_pszName</span><span class="pun">;</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">		m_pszName </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L5"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L6"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L7"><code class="language-cpp"></code></li><li class="L8"><code class="language-cpp"><span class="kwd">void</span><span class="pln"> </span><span class="typ">RefValue</span><span class="pun">::</span><span class="typ">AddRef</span><span class="pun">()</span></code></li><li class="L9"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">	m_nCount</span><span class="pun">++;</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="kwd">void</span><span class="pln"> </span><span class="typ">RefValue</span><span class="pun">::</span><span class="typ">Release</span><span class="pun">()</span></code></li><li class="L4"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L5"><code class="language-cpp"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(--</span><span class="pln">m_nCount </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">		</span><span class="kwd">delete</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">;</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L9"><code class="language-cpp"><span class="pln">	</span></code></li><li class="L0"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L1"><code class="language-cpp"></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="kwd">class</span><span class="pln"> </span><span class="typ">CStudent</span></code></li><li class="L4"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L5"><code class="language-cpp"><span class="kwd">public</span><span class="pun">:</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">);</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="pln">	</span><span class="pun">~</span><span class="typ">CStudent</span><span class="pun">();</span></code></li><li class="L0"><code class="language-cpp"></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">=(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">);</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> release</span><span class="pun">();</span></code></li><li class="L4"><code class="language-cpp"></code></li><li class="L5"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Show</span><span class="pun">()</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">		</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">m_pValue</span><span class="pun">-&gt;</span><span class="pln">m_nCount </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">		</span><span class="pun">{</span></code></li><li class="L9"><code class="language-cpp"><span class="pln">			cout </span><span class="pun">&lt;&lt;</span><span class="pln"> hex </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pun">&amp;)</span><span class="pln">m_pValue</span><span class="pun">-&gt;</span><span class="pln">m_pszName </span><span class="pun">&lt;&lt;</span><span class="pln"> m_pValue</span><span class="pun">-&gt;</span><span class="pln">m_nCount </span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">		</span><span class="pun">}</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="kwd">private</span><span class="pun">:</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="typ">RefValue</span><span class="pun">*</span><span class="pln"> m_pValue</span><span class="pun">;</span></code></li><li class="L5"><code class="language-cpp"><span class="pun">};</span></code></li><li class="L6"><code class="language-cpp"></code></li><li class="L7"><code class="language-cpp"></code></li><li class="L8"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">::</span><span class="typ">CStudent</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">)</span></code></li><li class="L9"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">	m_pValue </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RefValue</span><span class="pun">(</span><span class="pln">pszName</span><span class="pun">);</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">::</span><span class="typ">CStudent</span><span class="pun">(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">)</span></code></li><li class="L5"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	m_pValue </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pValue</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	m_pValue</span><span class="pun">-&gt;</span><span class="typ">AddRef</span><span class="pun">();</span></code></li><li class="L8"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">::~</span><span class="typ">CStudent</span><span class="pun">()</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	release</span><span class="pun">();</span></code></li><li class="L3"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L4"><code class="language-cpp"></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> </span><span class="typ">CStudent</span><span class="pun">::</span><span class="kwd">operator</span><span class="pun">=(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">)</span></code></li><li class="L7"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="pln">m_pValue </span><span class="pun">==</span><span class="pln"> m_pValue</span><span class="pun">)</span></code></li><li class="L9"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="pln">	m_pValue</span><span class="pun">-&gt;</span><span class="typ">Release</span><span class="pun">();</span></code></li><li class="L4"><code class="language-cpp"></code></li><li class="L5"><code class="language-cpp"><span class="pln">	m_pValue </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pValue</span><span class="pun">;</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	m_pValue</span><span class="pun">-&gt;</span><span class="typ">AddRef</span><span class="pun">();</span></code></li><li class="L7"><code class="language-cpp"></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;</span></code></li><li class="L9"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L0"><code class="language-cpp"></code></li><li class="L1"><code class="language-cpp"><span class="kwd">void</span><span class="pln"> </span><span class="typ">CStudent</span><span class="pun">::</span><span class="pln">release</span><span class="pun">()</span></code></li><li class="L2"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">	m_pValue</span><span class="pun">-&gt;</span><span class="typ">Release</span><span class="pun">();</span></code></li><li class="L4"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="typ">int</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> argc</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> argv</span><span class="pun">[])</span></code></li><li class="L7"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu1</span><span class="pun">(</span><span class="str">"zhang san"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu2</span><span class="pun">(</span><span class="str">"li si"</span><span class="pun">);</span></code></li><li class="L1"><code class="language-cpp"></code></li><li class="L2"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu3 </span><span class="pun">=</span><span class="pln"> stu2</span><span class="pun">;</span></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"></code></li><li class="L5"><code class="language-cpp"><span class="pln">	stu1</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	stu2</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	stu3</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="pln">	stu2</span><span class="pun">.</span><span class="pln">release</span><span class="pun">();</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">	</span><span class="com">//stu3.release();</span></code></li><li class="L1"><code class="language-cpp"></code></li><li class="L2"><code class="language-cpp"><span class="pln">	stu3</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"><span class="pln">	stu3</span><span class="pun">.</span><span class="pln">release</span><span class="pun">();</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pun">}</span></code></li></ol></pre></div><div><br></div><p class="MsoNormal" style="margin-left: 21pt; text-indent: -21pt;"><span style="font-family: 宋体; font-size: 11pt;">6.&nbsp;</span><span style="font-family: 宋体; font-size: 11pt;">举例说明写时拷贝的设计</span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p>&nbsp; &nbsp; 此时同样存在一个问题：如果其中的值发生了变化，应该怎么办？</o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><img src="index_files/e59fb85f-2705-4fdb-ac84-4c86cf37138e.png" border="0"></p><div>&nbsp;从例子中可以发现，使用引用计数之后，一旦修改了某个值，其他的值也里面随之改变。</div><div>&nbsp;解决方法：</div><div>&nbsp; 写时拷贝，在所有需要改变值的地方，重新分配内存。</div><div><img src="index_files/d4917025-dc97-4643-82a8-df36e3b44823.png" border="0"><div>&nbsp;</div></div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-cpp"><span class="com">// Student.cpp : Defines the entry point for the console application.</span></code></li><li class="L1"><code class="language-cpp"><span class="com">//</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="com">#include</span><span class="pln"> </span><span class="str">"stdafx.h"</span></code></li><li class="L4"><code class="language-cpp"><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;iostream.h&gt;</span></code></li><li class="L5"><code class="language-cpp"><span class="com">#include</span><span class="pln"> </span><span class="str">&lt;cstring&gt;</span></code></li><li class="L6"><code class="language-cpp"></code></li><li class="L7"><code class="language-cpp"><span class="kwd">struct</span><span class="pln"> </span><span class="typ">RefValue</span><span class="pln"> </span></code></li><li class="L8"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="pln">	</span><span class="typ">RefValue</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="pun">~</span><span class="typ">RefValue</span><span class="pun">();</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> </span><span class="typ">AddRef</span><span class="pun">();</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Release</span><span class="pun">();</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> m_pszName</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="typ">int</span><span class="pln">   m_nCount</span><span class="pun">;</span></code></li><li class="L8"><code class="language-cpp"><span class="pun">};</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="typ">RefValue</span><span class="pun">::</span><span class="typ">RefValue</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">)</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	m_pszName </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">[</span><span class="lit">256</span><span class="pun">];</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">	</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	strcpy</span><span class="pun">(</span><span class="pln">m_pszName</span><span class="pun">,</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L5"><code class="language-cpp"><span class="pln">	m_nCount </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span></code></li><li class="L6"><code class="language-cpp"></code></li><li class="L7"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="typ">RefValue</span><span class="pun">::~</span><span class="typ">RefValue</span><span class="pun">()</span></code></li><li class="L0"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">m_pszName </span><span class="pun">!=</span><span class="pln"> NULL</span><span class="pun">)</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">		</span><span class="kwd">delete</span><span class="pln"> m_pszName</span><span class="pun">;</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">		m_pszName </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L5"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L6"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L7"><code class="language-cpp"></code></li><li class="L8"><code class="language-cpp"><span class="kwd">void</span><span class="pln"> </span><span class="typ">RefValue</span><span class="pun">::</span><span class="typ">AddRef</span><span class="pun">()</span></code></li><li class="L9"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">	m_nCount</span><span class="pun">++;</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="kwd">void</span><span class="pln"> </span><span class="typ">RefValue</span><span class="pun">::</span><span class="typ">Release</span><span class="pun">()</span></code></li><li class="L4"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L5"><code class="language-cpp"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(--</span><span class="pln">m_nCount </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">		</span><span class="kwd">delete</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">;</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L9"><code class="language-cpp"><span class="pln">	</span></code></li><li class="L0"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L1"><code class="language-cpp"></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="kwd">class</span><span class="pln"> </span><span class="typ">CStudent</span></code></li><li class="L4"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L5"><code class="language-cpp"><span class="kwd">public</span><span class="pun">:</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">);</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> </span><span class="typ">SetName</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">);</span></code></li><li class="L0"><code class="language-cpp"></code></li><li class="L1"><code class="language-cpp"><span class="pln">	</span><span class="pun">~</span><span class="typ">CStudent</span><span class="pun">();</span></code></li><li class="L2"><code class="language-cpp"></code></li><li class="L3"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> </span><span class="kwd">operator</span><span class="pun">=(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">);</span></code></li><li class="L4"><code class="language-cpp"></code></li><li class="L5"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> release</span><span class="pun">();</span></code></li><li class="L6"><code class="language-cpp"></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Show</span><span class="pun">()</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L9"><code class="language-cpp"><span class="pln">		</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">m_pValue</span><span class="pun">-&gt;</span><span class="pln">m_nCount </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L0"><code class="language-cpp"><span class="pln">		</span><span class="pun">{</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">			cout </span><span class="pun">&lt;&lt;</span><span class="pln"> hex </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pun">&amp;)</span><span class="pln">m_pValue</span><span class="pun">-&gt;</span><span class="pln">m_pszName </span><span class="pun">&lt;&lt;</span><span class="pln"> m_pValue</span><span class="pun">-&gt;</span><span class="pln">m_pszName </span><span class="pun">&lt;&lt;</span><span class="pln">endl</span><span class="pun">;</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">		</span><span class="pun">}</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L4"><code class="language-cpp"></code></li><li class="L5"><code class="language-cpp"><span class="kwd">private</span><span class="pun">:</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="typ">RefValue</span><span class="pun">*</span><span class="pln"> m_pValue</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pun">};</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="kwd">void</span><span class="pln"> </span><span class="typ">CStudent</span><span class="pun">::</span><span class="typ">SetName</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">)</span></code></li><li class="L0"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L1"><code class="language-cpp"><span class="pln">	m_pValue</span><span class="pun">-&gt;</span><span class="typ">Release</span><span class="pun">();</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	m_pValue </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RefValue</span><span class="pun">(</span><span class="pln">pszName</span><span class="pun">);</span></code></li><li class="L3"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L4"><code class="language-cpp"></code></li><li class="L5"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">::</span><span class="typ">CStudent</span><span class="pun">(</span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> pszName</span><span class="pun">)</span></code></li><li class="L6"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	m_pValue </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">RefValue</span><span class="pun">(</span><span class="pln">pszName</span><span class="pun">);</span></code></li><li class="L8"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">::</span><span class="typ">CStudent</span><span class="pun">(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">)</span></code></li><li class="L1"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	m_pValue </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pValue</span><span class="pun">;</span></code></li><li class="L3"><code class="language-cpp"><span class="pln">	m_pValue</span><span class="pun">-&gt;</span><span class="typ">AddRef</span><span class="pun">();</span></code></li><li class="L4"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">::~</span><span class="typ">CStudent</span><span class="pun">()</span></code></li><li class="L7"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L8"><code class="language-cpp"><span class="pln">	release</span><span class="pun">();</span></code></li><li class="L9"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L0"><code class="language-cpp"></code></li><li class="L1"><code class="language-cpp"></code></li><li class="L2"><code class="language-cpp"><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> </span><span class="typ">CStudent</span><span class="pun">::</span><span class="kwd">operator</span><span class="pun">=(</span><span class="typ">CStudent</span><span class="pun">&amp;</span><span class="pln"> obj</span><span class="pun">)</span></code></li><li class="L3"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">obj</span><span class="pun">.</span><span class="pln">m_pValue </span><span class="pun">==</span><span class="pln"> m_pValue</span><span class="pun">)</span></code></li><li class="L5"><code class="language-cpp"><span class="pln">	</span><span class="pun">{</span></code></li><li class="L6"><code class="language-cpp"><span class="pln">		</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	</span><span class="pun">}</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="pln">	m_pValue</span><span class="pun">-&gt;</span><span class="typ">Release</span><span class="pun">();</span></code></li><li class="L0"><code class="language-cpp"></code></li><li class="L1"><code class="language-cpp"><span class="pln">	m_pValue </span><span class="pun">=</span><span class="pln"> obj</span><span class="pun">.</span><span class="pln">m_pValue</span><span class="pun">;</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	m_pValue</span><span class="pun">-&gt;</span><span class="typ">AddRef</span><span class="pun">();</span></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="pun">*</span><span class="kwd">this</span><span class="pun">;</span></code></li><li class="L5"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L6"><code class="language-cpp"></code></li><li class="L7"><code class="language-cpp"><span class="kwd">void</span><span class="pln"> </span><span class="typ">CStudent</span><span class="pun">::</span><span class="pln">release</span><span class="pun">()</span></code></li><li class="L8"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L9"><code class="language-cpp"><span class="pln">	m_pValue</span><span class="pun">-&gt;</span><span class="typ">Release</span><span class="pun">();</span></code></li><li class="L0"><code class="language-cpp"><span class="pun">}</span></code></li><li class="L1"><code class="language-cpp"></code></li><li class="L2"><code class="language-cpp"><span class="typ">int</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">int</span><span class="pln"> argc</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">char</span><span class="pun">*</span><span class="pln"> argv</span><span class="pun">[])</span></code></li><li class="L3"><code class="language-cpp"><span class="pun">{</span></code></li><li class="L4"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu1</span><span class="pun">(</span><span class="str">"zhang san"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu2</span><span class="pun">(</span><span class="str">"li si"</span><span class="pun">);</span></code></li><li class="L7"><code class="language-cpp"></code></li><li class="L8"><code class="language-cpp"><span class="pln">	</span><span class="typ">CStudent</span><span class="pln"> stu3 </span><span class="pun">=</span><span class="pln"> stu2</span><span class="pun">;</span></code></li><li class="L9"><code class="language-cpp"></code></li><li class="L0"><code class="language-cpp"></code></li><li class="L1"><code class="language-cpp"><span class="pln">	stu2</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L2"><code class="language-cpp"><span class="pln">	stu3</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L3"><code class="language-cpp"></code></li><li class="L4"><code class="language-cpp"><span class="pln">	stu2</span><span class="pun">.</span><span class="typ">SetName</span><span class="pun">(</span><span class="str">"li si2"</span><span class="pun">);</span></code></li><li class="L5"><code class="language-cpp"></code></li><li class="L6"><code class="language-cpp"><span class="pln">	stu2</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L7"><code class="language-cpp"><span class="pln">	stu3</span><span class="pun">.</span><span class="typ">Show</span><span class="pun">();</span></code></li><li class="L8"><code class="language-cpp"></code></li><li class="L9"><code class="language-cpp"><span class="pln">	</span><span class="kwd">return</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L0"><code class="language-cpp"><span class="pun">}</span></code></li></ol></pre></div><div><br></div></div><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p><p class="MsoNormal" style="line-height: 18.95pt;"><span style="mso-spacerun:'yes';font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p><br></o:p></span></p></body></html>