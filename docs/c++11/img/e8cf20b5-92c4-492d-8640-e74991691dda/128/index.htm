<!doctype html><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=unicode">
<title>stl中的智能指针使用简述1 --auto_ptr的使用</title>
    
<style id="wiz_code_style">.wiz-code-container{position: relative; padding:8px 0; margin: 5px 25px 5px 5px;text-indent:0; text-align:left;}.CodeMirror {font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; color: black; font-size: 10pt; font-size: 0.83rem}.CodeMirror-lines {padding: 4px 0;}.CodeMirror pre {padding: 0 4px;}.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {background-color: white;}.CodeMirror-gutters {border-right: 1px solid #ddd; background-color: #f7f7f7; white-space: nowrap;}.CodeMirror-linenumbers {}.CodeMirror-linenumber {padding: 0 3px 0 5px; min-width: 20px; text-align: right; color: #999; white-space: nowrap;}.CodeMirror-guttermarker {color: black;}.CodeMirror-guttermarker-subtle {color: #999;}.CodeMirror-cursor {border-left: 1px solid black; border-right: none; width: 0;}.CodeMirror div.CodeMirror-secondarycursor {border-left: 1px solid silver;}.cm-fat-cursor .CodeMirror-cursor {width: auto; border: 0 !important; background: #7e7;}.cm-fat-cursor div.CodeMirror-cursors {z-index: 1;}.cm-animate-fat-cursor {width: auto; border: 0; -webkit-animation: blink 1.06s steps(1) infinite; -moz-animation: blink 1.06s steps(1) infinite; animation: blink 1.06s steps(1) infinite; background-color: #7e7;}@-moz-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@-webkit-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}.CodeMirror-overwrite .CodeMirror-cursor {}.cm-tab { display: inline-block; text-decoration: inherit; }.CodeMirror-rulers {position: absolute; left: 0; right: 0; top: -50px; bottom: -20px; overflow: hidden;}.CodeMirror-ruler {border-left: 1px solid #ccc; top: 0; bottom: 0; position: absolute;}.cm-s-default .cm-header {color: blue;}.cm-s-default .cm-quote {color: #090;}.cm-negative {color: #d44;}.cm-positive {color: #292;}.cm-header, .cm-strong {font-weight: bold;}.cm-em {font-style: italic;}.cm-link {text-decoration: underline;}.cm-strikethrough {text-decoration: line-through;}.cm-s-default .cm-keyword {color: #708;}.cm-s-default .cm-atom {color: #219;}.cm-s-default .cm-number {color: #164;}.cm-s-default .cm-def {color: #00f;}.cm-s-default .cm-variable,.cm-s-default .cm-punctuation,.cm-s-default .cm-property,.cm-s-default .cm-operator {}.cm-s-default .cm-variable-2 {color: #05a;}.cm-s-default .cm-variable-3 {color: #085;}.cm-s-default .cm-comment {color: #a50;}.cm-s-default .cm-string {color: #a11;}.cm-s-default .cm-string-2 {color: #f50;}.cm-s-default .cm-meta {color: #555;}.cm-s-default .cm-qualifier {color: #555;}.cm-s-default .cm-builtin {color: #30a;}.cm-s-default .cm-bracket {color: #997;}.cm-s-default .cm-tag {color: #170;}.cm-s-default .cm-attribute {color: #00c;}.cm-s-default .cm-hr {color: #999;}.cm-s-default .cm-link {color: #00c;}.cm-s-default .cm-error {color: #f00;}.cm-invalidchar {color: #f00;}.CodeMirror-composing { border-bottom: 2px solid; }div.CodeMirror span.CodeMirror-matchingbracket {color: #0f0;}div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #f22;}.CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }.CodeMirror-activeline-background {background: #e8f2ff;}.CodeMirror {position: relative; background: #f5f5f5;}.CodeMirror-scroll {overflow: hidden !important; margin-bottom: 0; margin-right: -30px; padding: 16px 30px 16px 0; outline: none; position: relative;}.CodeMirror-sizer {position: relative; border-right: 30px solid transparent;}.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {position: absolute; z-index: 6; display: none;}.CodeMirror-vscrollbar {right: 0; top: 0; overflow-x: hidden; overflow-y: scroll;}.CodeMirror-hscrollbar {bottom: 0; left: 0 !important; overflow-y: hidden; overflow-x: scroll;}.CodeMirror-scrollbar-filler {right: 0; bottom: 0;}.CodeMirror-gutter-filler {left: 0; bottom: 0;}.CodeMirror-gutters {position: absolute; left: 0; top: -5px; min-height: 100%; z-index: 3;}.CodeMirror-gutter {white-space: normal; height: inherit; display: inline-block; vertical-align: top; margin-bottom: -30px;}.CodeMirror-gutter-wrapper {position: absolute; z-index: 4; background: none !important; border: none !important;}.CodeMirror-gutter-background {position: absolute; top: 0; bottom: 0; z-index: 4;}.CodeMirror-gutter-elt {position: absolute; cursor: default; z-index: 4; text-align: center;}.CodeMirror-gutter-wrapper ::selection { background-color: transparent }.CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }.CodeMirror-lines {cursor: text; min-height: 1px;}.CodeMirror pre {-moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0; border-width: 0; background: transparent; font-family: inherit; font-size: inherit; margin: 0; white-space: pre; word-wrap: normal; line-height: inherit; color: inherit; z-index: 2; position: relative; overflow: visible; -webkit-tap-highlight-color: transparent; -webkit-font-variant-ligatures: contextual; font-variant-ligatures: contextual;}.CodeMirror-wrap pre {word-wrap: break-word; white-space: pre-wrap; word-break: normal;}.CodeMirror-linebackground {position: absolute; left: 0; right: 0; top: 0; bottom: 0; z-index: 0;}.CodeMirror-linewidget {position: relative; z-index: 2; overflow: auto;}.CodeMirror-widget {}.CodeMirror-rtl pre { direction: rtl; }.CodeMirror-code {outline: none;}.CodeMirror-scroll,.CodeMirror-sizer,.CodeMirror-gutter,.CodeMirror-gutters,.CodeMirror-linenumber {-moz-box-sizing: content-box; box-sizing: content-box;}.CodeMirror-measure {position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;}.CodeMirror-cursor {position: absolute; pointer-events: none;}.CodeMirror-measure pre { position: static; }div.CodeMirror-cursors {visibility: hidden; position: relative; z-index: 3;}div.CodeMirror-dragcursors {visibility: visible;}.CodeMirror-focused div.CodeMirror-cursors {visibility: visible;}.CodeMirror-selected { background: #d9d9d9; }.CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }.CodeMirror-crosshair { cursor: crosshair; }.CodeMirror-line::selection, .CodeMirror-line &gt; span::selection, .CodeMirror-line &gt; span &gt; span::selection { background: #d7d4f0; }.CodeMirror-line::-moz-selection, .CodeMirror-line &gt; span::-moz-selection, .CodeMirror-line &gt; span &gt; span::-moz-selection { background: #d7d4f0; }.cm-searching {background: #ffa; background: rgba(255, 255, 0, .4);}.cm-force-border { padding-right: .1px; }@media print {  .CodeMirror div.CodeMirror-cursors {visibility: hidden;}}.cm-tab-wrap-hack:after { content: ""; }span.CodeMirror-selectedtext { background: none; }.CodeMirror-activeline-background, .CodeMirror-selected {transition: visibility 0ms 100ms;}.CodeMirror-blur .CodeMirror-activeline-background, .CodeMirror-blur .CodeMirror-selected {visibility:hidden;}.CodeMirror-blur .CodeMirror-matchingbracket {color:inherit !important;outline:none !important;text-decoration:none !important;}</style><style name="wiz_code_style" id="wiz_code_style-base16-light">.cm-s-base16-light.CodeMirror { background: #f5f5f5; color: #202020; }.cm-s-base16-light div.CodeMirror-selected { background: #e0e0e0; }.cm-s-base16-light .CodeMirror-line::selection, .cm-s-base16-light .CodeMirror-line &gt; span::selection, .cm-s-base16-light .CodeMirror-line &gt; span &gt; span::selection { background: #e0e0e0; }.cm-s-base16-light .CodeMirror-line::-moz-selection, .cm-s-base16-light .CodeMirror-line &gt; span::-moz-selection, .cm-s-base16-light .CodeMirror-line &gt; span &gt; span::-moz-selection { background: #e0e0e0; }.cm-s-base16-light .CodeMirror-gutters { background: #f5f5f5; border-right: 0px; }.cm-s-base16-light .CodeMirror-guttermarker { color: #ac4142; }.cm-s-base16-light .CodeMirror-guttermarker-subtle { color: #b0b0b0; }.cm-s-base16-light .CodeMirror-linenumber { color: #b0b0b0; }.cm-s-base16-light .CodeMirror-cursor { border-left: 1px solid #505050; }.cm-s-base16-light span.cm-comment { color: #8f5536; }.cm-s-base16-light span.cm-atom { color: #aa759f; }.cm-s-base16-light span.cm-number { color: #aa759f; }.cm-s-base16-light span.cm-property, .cm-s-base16-light span.cm-attribute { color: #90a959; }.cm-s-base16-light span.cm-keyword { color: #ac4142; }.cm-s-base16-light span.cm-string { color: #f4bf75; }.cm-s-base16-light span.cm-variable { color: #90a959; }.cm-s-base16-light span.cm-variable-2 { color: #6a9fb5; }.cm-s-base16-light span.cm-def { color: #d28445; }.cm-s-base16-light span.cm-bracket { color: #202020; }.cm-s-base16-light span.cm-tag { color: #ac4142; }.cm-s-base16-light span.cm-link { color: #aa759f; }.cm-s-base16-light span.cm-error { background: #ac4142; color: #505050; }.cm-s-base16-light .CodeMirror-activeline-background { background: #DDDCDC; }.cm-s-base16-light .CodeMirror-matchingbracket { text-decoration: underline; color: white !important; }</style><style id="wiz_custom_css">html, .wiz-editor-body {font-size: 12pt;}.wiz-editor-body {font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;line-height: 1.7;margin: 0 auto;position:relative;padding: 20px 16px;}.wiz-editor-body h1,.wiz-editor-body h2,.wiz-editor-body h3,.wiz-editor-body h4,.wiz-editor-body h5,.wiz-editor-body h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}.wiz-editor-body h1 {font-size:20pt;font-size:1.67rem;}.wiz-editor-body h2 {font-size:18pt;font-size:1.5rem;}.wiz-editor-body h3 {font-size:15pt;font-size:1.25rem;}.wiz-editor-body h4 {font-size:14pt;font-size:1.17rem;}.wiz-editor-body h5 {font-size:12pt;font-size:1rem;}.wiz-editor-body h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}.wiz-editor-body div,.wiz-editor-body p,.wiz-editor-body ul,.wiz-editor-body ol,.wiz-editor-body dl,.wiz-editor-body li {margin:8px 0 0;}.wiz-editor-body blockquote,.wiz-editor-body table,.wiz-editor-body pre,.wiz-editor-body code {margin:8px 0;}.wiz-editor-body .CodeMirror pre {margin:0;}.wiz-editor-body a {word-wrap: break-word;text-decoration-skip-ink: none;}.wiz-editor-body ul,.wiz-editor-body ol {padding-left:32px;padding-left:2rem;}.wiz-editor-body ol.wiz-list-level1 > li {list-style-type:decimal;}.wiz-editor-body ol.wiz-list-level2 > li {list-style-type:lower-latin;}.wiz-editor-body ol.wiz-list-level3 > li {list-style-type:lower-roman;}.wiz-editor-body li.wiz-list-align-style {list-style-position: inside; margin-left: -1em;}.wiz-editor-body blockquote {padding: 0 12px;}.wiz-editor-body blockquote > :first-child {margin-top:0;}.wiz-editor-body blockquote > :last-child {margin-bottom:0;}.wiz-editor-body img {border:0;max-width:100%;height:auto !important;margin:2px 0;padding: 2px;vertical-align:bottom;}.wiz-editor-body table {border-collapse:collapse;border:1px solid #a7afbc;}.wiz-editor-body td,.wiz-editor-body th {padding:4px 8px;border-collapse:collapse;border:1px solid #a7afbc;min-height:28px;word-break:break-word;box-sizing: border-box;}.wiz-editor-body td > div:first-child {margin-top:0;}.wiz-editor-body td > div:last-child {margin-bottom:0;}.wiz-editor-body img.wiz-svg-image {box-shadow:1px 1px 4px #E8E8E8;}.wiz-editor-body .wiz-image-container {margin:0;max-width: 100%;display: inline-flex;flex-direction: column;}.wiz-editor-body .wiz-image-container .wiz-image-title {display:inline-block;text-align: center;color: #a7afbc;line-height: 18px;font-size: 12px;min-height: 18px;width: 100%;white-space: normal;}.wiz-hide {display:none !important;}.wiz-editor-body.wiz-editor-outline {padding-right:0; padding-left:0;}.wiz-editor-body.wiz-editor-outline .outline-container {margin:0; padding:0; line-height:1.5;}.wiz-editor-body.wiz-editor-outline .outline-container div {margin:0;}.wiz-editor-body.wiz-editor-outline .node {margin:0; padding: 0;}.wiz-editor-body.wiz-editor-outline .outline-container > .node {margin-right:24px; margin-left:30px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .children {display:none;}.wiz-editor-body.wiz-editor-outline .node .row {position:relative; padding-left:26px;}.wiz-editor-body.wiz-editor-outline .node .operator-container {width:36px;position:absolute; top:4px; left:-18px;}.wiz-editor-body.wiz-editor-outline .node .operator-bar {position:absolute; top:0; left:0; right:0; bottom:0; display:flex; align-items:center; justify-content:center;}.wiz-editor-body.wiz-editor-outline .node .switch {width:18px; height:18px;display:flex;flex-direction: column;align-items: center;overflow: hidden;}.wiz-editor-body.wiz-editor-outline .node .switch i {font-size:20px;position:relative;left:-1px;top:-1px;}.wiz-editor-body.wiz-editor-outline .node .switch.active {cursor:pointer;color:transparent; transition:transform 200ms ease 0s;}.wiz-editor-body.wiz-editor-outline .node.collapsed .switch.active {transform:rotateZ(-90deg);}.wiz-editor-body.wiz-editor-outline .node .row:hover .switch.active {color:#505F79}.wiz-editor-body.wiz-editor-outline .node .dot {display:flex; align-items:center; justify-content:center; border-radius:100%; width:18px; height:18px;}.wiz-editor-body.wiz-editor-outline .node.collapsed .dot {background-color:rgba(80, 95, 121, .15);}.wiz-editor-body.wiz-editor-outline .node .dot-icon {background-color:#505F79; border-radius:100%; width:6px; height:6px;}.wiz-editor-body.wiz-editor-outline .node .child {margin-left:8px; border-left:1px solid #E6E9ED; padding-left:17px;}.wiz-editor-body.wiz-editor-outline .node .content {flex:1;outline:none; padding:4px 0;}.wiz-editor-body.wiz-editor-outline .node div.content {font-size:1rem;}.wiz-editor-body.wiz-editor-outline .node.complete > .row .content {text-decoration:line-through;color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .notes {outline:none; font-size:.8rem; color:#A7AFBC;}.wiz-editor-body.wiz-editor-outline .node .image {outline:none; padding-top:4px; padding-bottom:4px;}.wiz-editor-body.wiz-editor-outline .outline-container h1,.wiz-editor-body.wiz-editor-outline .outline-container h2,.wiz-editor-body.wiz-editor-outline .outline-container h3,.wiz-editor-body.wiz-editor-outline .outline-container h4,.wiz-editor-body.wiz-editor-outline .outline-container h5,.wiz-editor-body.wiz-editor-outline .outline-container h6 {margin:0;}body, .wiz-editor-body {  padding-left: 48px;  padding-right: 48px;}</style><style name="wiz_unsave_style">html, .wiz-editor-body {    font-size: 12pt;}body, .wiz-editor-body {    font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;    line-height: 1.7 !important;    color: inherit;    background-color: #ffffff;}img{    max-width: 100%;}.wiz-todo-main{	line-height: 1.7 !important;}</style><style name="wiz_unsave_style">body::-webkit-scrollbar {width: 16px;height: 16px;background-color: #f0f0f0;border: none;}body::-webkit-scrollbar-thumb {background-color: #dcdcdc;}body::-webkit-scrollbar-thumb:hover {background-color: #c0c0c0;}body::-webkit-scrollbar-thumb:active {background-color: #969696;}body::-webkit-scrollbar-thumb:disabled {background-color: #f9f9f9;}body::_webkit_scrollbar-track {background-color: #ffffff;}body::-webkit-scrollbar-corner {background-color: #f0f0f0;}body::-webkit-scrollbar-button {\*  display: none;*\}body.flat-scrollbar::-webkit-scrollbar,body.flat-scrollbar div::-webkit-scrollbar,body.flat-scrollbar ul::-webkit-scrollbar,body.flat-scrollbar aside::-webkit-scrollbar,body.flat-scrollbar iframe::-webkit-scrollbar {width: 12px;height: 12px;}</style><script type="text/javascript" src="file:///C:/Program%20Files%20(x86)/WizNote/WizTools/htmleditor/editorHelper.js" wiz_style="unsave" charset="utf-8" defer></script><script type="text/javascript" src="file:///C:/Users/Halo/Documents/My%20Knowledge/templates/WizTemplate.js" wiz_style="unsave" charset="utf-8" defer></script><script type="text/javascript" src="file:///C:/Program%20Files%20(x86)/WizNote/WizTools/htmleditor/core/wizEditorForPc.js" wiz_style="unsave" charset="utf-8" defer></script><script type="text/javascript" wiz_style="unsave" charset="utf-8">document.addEventListener('DOMContentLoaded', function handler(){
	if(window.external){
		try{
			window.WizChromeBrowser.Execute("Wiz_DOMContentLoaded", null, null, null, null);
		}catch(err){
			console.error(err);
		}
	}
	document.removeEventListener('DOMContentLoaded', handler, false);
}, false);</script></head>

<body class spellcheck="false"><div>stl中的智能指针主要是以下4种：</div><div data-mode="C++" data-theme="base16-light" id="wiz_cm_1525066700354_8357" class="wiz-code-container"><textarea style="display:none;">auto_ptr
unique_ptr
shared_ptr
weak_ptr</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525065445920_6790"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 19.9863px; left: 33.3424px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 91px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>4</div></div><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>4</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4.34782px; top: 0px; height: 20.8695px;">&nbsp;</div></div><div class="CodeMirror-code"><div class="CodeMirror-activeline" style="position: relative;"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">auto_ptr</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">unique_ptr</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">shared_ptr</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">weak_ptr</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 91px;"></div><div class="CodeMirror-gutters" style="height: 121px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><br></div><div>这四种指针在使用上有区别：</div><div>&nbsp; 1. auto_ptr有缺陷是过时的产物。</div><div>&nbsp; 2. unique_ptr对auto_ptr的问题进行了修正。</div><div>&nbsp; 3. shared_ptr使用了引用计数，但是会出现循环引用的问题需要配合后面的weak_ptr一起使用。</div><div><br></div><div>下面分别讲解这四种指针的具体使用：</div><div><br></div><div>&nbsp; 1. auto_ptr：</div><blockquote style="margin: 0 0 0 40px; border: none; padding: 0px;"><div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><div id="I_type" style="margin:0px;color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">class template</div></div></div><div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><div id="I_file" style="margin:0px;color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">&lt;memory&gt;</div></div></div><div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><h1 style="margin:1.25rem 0px 0.625rem;padding:0px;font-weight:bold;font-size:1.67rem;color:rgb(0, 0, 0);font-family:Simsun;font-style:normal;text-align:start;text-indent:0px;"><span class="namespace">std::</span>auto_ptr</h1></div></div><div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><div class="C_prototype" style="margin:0px;color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><pre style="margin:8px 0px;">template &lt;class X&gt; class auto_ptr;</pre></div></div></div></div><div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><div id="I_description" style="margin:0px;color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">Automatic Pointer [deprecated]</div></div></div></div></blockquote><div><br></div><div>&nbsp; <span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">从官网的文档上就可以看出，这个auto_ptr指针不推荐使用(deprecated)，原因这里也有说明：</span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><b style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;text-align:start;text-indent:0px;"><br></b></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><b style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;text-align:start;text-indent:0px;">Note:</b><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>This class template is deprecated as of C++11.<span class="Apple-converted-space">&nbsp;</span></span><a href="http://www.cplusplus.com/unique_ptr" style="font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">unique_ptr</a><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>is a new facility with a similar functionality, but with improved security (no fake copy assignments), added features (</span><i style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-weight:normal;text-align:start;text-indent:0px;">deleters</i><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">) and support for arrays. See<span class="Apple-converted-space">&nbsp;</span></span><a href="http://www.cplusplus.com/unique_ptr" style="font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">unique_ptr</a><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>for additional information.</span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><br></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">&nbsp; 解释：auto_ptr指针在c++11标准中就被废除了，可以使用unique_ptr来替代，功能上是相同的，unique_ptr相比较auto_ptr而言，提升了安全性（没有浅拷贝），增加了特性（delete析构）和对数组的支持。</span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><br></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">&nbsp;<span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">This class template provides a limited<span class="Apple-converted-space">&nbsp;</span></span><i style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-weight:normal;text-align:start;text-indent:0px;">garbage collection</i><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>facility for pointers, by allowing pointers to have the elements they point to automatically destroyed when the<span class="Apple-converted-space">&nbsp;</span></span><i style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</i><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>object is itself destroyed.</span></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><br></span></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">&nbsp; 解释：这个类模板提供了有限度的垃圾回收机制，通过将一个指针保存在auto_ptr对象中，当auto_ptr对象析构时，这个对象所保存的指针也会被析构掉。</span><br></span></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><br></span></span></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>objects have the peculiarity of<span class="Apple-converted-space">&nbsp;</span></span><i style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-weight:normal;text-align:start;text-indent:0px;">taking ownership</i><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>of the pointers assigned to them: An<span class="Apple-converted-space">&nbsp;</span></span><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>object that has ownership over one element is in charge of destroying the element it points to and to deallocate the memory allocated to it when itself is destroyed. The destructor does this by calling<span class="Apple-converted-space">&nbsp;</span></span><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">operator delete</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>automatically.</span><br></span></span></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><br></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">解释： &nbsp;auto_ptr 对象拥有其内部指针的所有权。这意味着auto_ptr对其内部指针的释放负责，即当自身被释放时，会在析构函数中自动的调用delete，从而释放内部指针的内存。</span><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><br></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">Therefore, no two<span class="Apple-converted-space">&nbsp;</span></span><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>objects should<span class="Apple-converted-space">&nbsp;</span></span><i style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-weight:normal;text-align:start;text-indent:0px;">own</i><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>the same element, since both would try to destruct them at some point. When an assignment operation takes place between two<span class="Apple-converted-space">&nbsp;</span></span><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>objects,<span class="Apple-converted-space">&nbsp;</span></span><i style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-weight:normal;text-align:start;text-indent:0px;">ownership</i><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>is transferred, which means that the object losing ownership is set to no longer point to the element (it is set to the<span class="Apple-converted-space">&nbsp;</span></span><i style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-weight:normal;text-align:start;text-indent:0px;">null pointer</i><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">).</span></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><br></span></span></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">解释： &nbsp;正因如此，不能有两个auto_ptr 对象拥有同一个内部指针的所有权，因为有可能在某个时机，两者均会尝试析构这个内部指针。当两个auto_ptr对象之间发生赋值操作时，内部指针被拥有的所有权会发生转移，这意味着这个赋值的右者对象会丧失该所有权，不在指向这个内部指针（其会被设置成null指针）。</span><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;">到这里，我们来看一下auto_ptr的提供的接口和使用方法：</span></div><div><div><img src="index_files/0fbfe140-81e6-40fe-a97e-b9fe13befeb9.png" style="vertical-align: bottom; max-width: 100%;"></div><div><br></div><div>其中构造值得说一下：</div><div><img src="index_files/7fba329e-be79-4854-abcf-d9ea362f2cfd.png" style="vertical-align: bottom; max-width: 100%;"></div><div><br></div><div><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">Constructs an<span class="Apple-converted-space">&nbsp;</span></span><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>object either from a pointer or from another<span class="Apple-converted-space">&nbsp;</span></span><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>object.</span><br style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">Since<span class="Apple-converted-space">&nbsp;</span></span><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>objects take ownership of the pointer they<span class="Apple-converted-space">&nbsp;</span></span><i style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-weight:normal;text-align:start;text-indent:0px;">point to</i><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">, when a new<span class="Apple-converted-space">&nbsp;</span></span><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>is constructed from another<span class="Apple-converted-space">&nbsp;</span></span><tt style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;text-align:start;text-indent:0px;">auto_ptr</tt><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">, the former owner<span class="Apple-converted-space">&nbsp;</span></span><i style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-weight:normal;text-align:start;text-indent:0px;">releases</i><span style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><span class="Apple-converted-space">&nbsp;</span>it.</span><br></div><div><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">解释： &nbsp;auto_ptr的构造的参数可以是一个指针，或者是另外一个auto_ptr对象。</span><br></div></div><div><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;当一个新的auto_ptr获取了内部指针的所有权后，之前的拥有着会释放其所有权。</span></div><div><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><br></span></div><div><b>1. 构造</b></div><div><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">这里写代码测试：</span></div><div data-mode="C++" data-theme="base16-light" id="wiz_cm_1525066700354_6112" class="wiz-code-container"><textarea style="display:none;">#include "stdafx.h"
#include &lt;iostream&gt;
#include &lt;memory&gt;
using namespace std;

int _tmain(int argc, _TCHAR* argv[])
{
	//通过指针进行构造
	std::auto_ptr&lt;int&gt; aptr(new int(3)); 
	
	printf("aptr %p : %d\r\n", aptr.get(), *aptr);
	//这样会编译出错，因为auto_ptr的构造有关键字explicit
	//explicit关键字表示调用构造函数时不能使用隐式赋值，而必须是显示调用
	//std::auto_ptr&lt;int&gt; aptr2 = new int(3); 

	//可以用其他的auto_ptr指针进行初始化
	std::auto_ptr&lt;int&gt; aptr2 = aptr;
	printf("aptr2 %p : %d\r\n", aptr2.get(), *aptr2);

	//但是这么内存访问出错，直接0xc05,因为aptr已经释放了其所有权。
	//*aptr = 4;
	printf("aptr %p\r\n", aptr.get());
	
	return 0;
}</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525065445877_4984"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 19.9864px; left: 33.3424px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 530px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>25</div></div><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>25</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4.34782px; top: 0px; height: 20.8696px;">&nbsp;</div></div><div class="CodeMirror-code"><div class="CodeMirror-activeline" style="position: relative;"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-meta">#include "stdafx.h"</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;iostream&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;memory&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">using</span> <span class="cm-keyword">namespace</span> <span class="cm-def">std</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">int</span> <span class="cm-def">_tmain</span>(<span class="cm-type">int</span> <span class="cm-variable">argc</span>, <span class="cm-variable">_TCHAR</span><span class="cm-operator">*</span> <span class="cm-variable">argv</span>[])</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//通过指针进行构造</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr</span>(<span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>)); </span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span class="cm-tab-wrap-hack" style="padding-right: 0.1px;"><span class="cm-tab">    </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"aptr %p : %d\r\n"</span>, <span class="cm-variable">aptr</span>.<span class="cm-variable">get</span>(), <span class="cm-operator">*</span><span class="cm-variable">aptr</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//这样会编译出错，因为auto_ptr的构造有关键字explicit</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//explicit关键字表示调用构造函数时不能使用隐式赋值，而必须是显示调用</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//std::auto_ptr&lt;int&gt; aptr2 = new int(3); </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">15</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">16</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//可以用其他的auto_ptr指针进行初始化</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">17</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr2</span> <span class="cm-operator">=</span> <span class="cm-variable">aptr</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">18</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"aptr2 %p : %d\r\n"</span>, <span class="cm-variable">aptr2</span>.<span class="cm-variable">get</span>(), <span class="cm-operator">*</span><span class="cm-variable">aptr2</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">19</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">20</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//但是这么内存访问出错，直接0xc05,因为aptr已经释放了其所有权。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">21</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//*aptr = 4;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">22</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"aptr %p\r\n"</span>, <span class="cm-variable">aptr</span>.<span class="cm-variable">get</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">23</div></div><pre class="CodeMirror-line"><span class="cm-tab-wrap-hack" style="padding-right: 0.1px;"><span class="cm-tab">    </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">24</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">return</span> <span class="cm-number">0</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">25</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 530px;"></div><div class="CodeMirror-gutters" style="height: 560px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><br></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;">这里的结果是：</span></div><div><div><img src="index_files/72e9a22b-311c-4d1d-9a6d-565dd370a99e.png" style="vertical-align: bottom; max-width: 100%;"></div><div><br></div><div><b style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;text-align:start;text-indent:0px;">2. 析构</b></div><div>再来看自动释放的情况：</div></div><div>代码如下：</div><div data-mode="C++" data-theme="base16-light" id="wiz_cm_1525066700354_7334" class="wiz-code-container"><textarea style="display:none;">void foo_release()
{
	//释放
	int* pNew = new int(3);
	{
		std::auto_ptr&lt;int&gt; aptr(pNew);
	}

}</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525065816208_4787"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 166.073px; left: 32.9891px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 196px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors" style="visibility: hidden;"><div class="CodeMirror-cursor" style="left: 3.99456px; top: 146.087px; height: 20.8696px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_release</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//释放</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">int*</span> <span class="cm-variable">pNew</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr</span>(<span class="cm-variable">pNew</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;" class="CodeMirror-activeline"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 196px;"></div><div class="CodeMirror-gutters" style="height: 226px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><img src="index_files/33293391-40ec-4884-a93f-cef0d77760ae.png" style="vertical-align: bottom; max-width: 100%;"></div><div><br></div><div><br></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;">这里显然，当出了块作用域之后，aptr对象会自动调用析构，然后在析构中会自动的delete其内部指针，也就是出了这个作用域后，其内部指针就被释放了。当然上面这种写法是不推荐的，因为我们这里本质上就是希望不用去管指针的释放工作，上面的写法就又需要程序员自己操心指针的问题，也就是使用智能指针要避免出现指针的直接使用！</span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div>这里可以在使用前调用release，从而放弃其内部指针的使用权，但是同样这么做违背了智能指针的初衷。</div><div data-mode="C++" data-theme="base16-light" id="wiz_cm_1525066700354_6304" class="wiz-code-container"><textarea style="display:none;">void foo_release()
{
	//释放
	int* pNew = new int(3);
	{
		std::auto_ptr&lt;int&gt; aptr(pNew);
		int* p = aptr.release();
	}

}</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525066234034_8579"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 145.204px; left: 149.796px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 217px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>10</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 120.802px; top: 125.217px; height: 20.8696px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_release</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//释放</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">int*</span> <span class="cm-variable">pNew</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr</span>(<span class="cm-variable">pNew</span>);</span></pre></div><div style="position: relative;" class="CodeMirror-activeline"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-type">int*</span> <span class="cm-variable">p</span> <span class="cm-operator">=</span> <span class="cm-variable">aptr</span>.<span class="cm-variable">release</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 217px;"></div><div class="CodeMirror-gutters" style="height: 247px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div>可以看到当auto_ptr调用了release后，堆指针的内存仍还在。</div><div><div><img src="index_files/a3426846-13f9-4430-8aac-aa2c602522cf.png" style="vertical-align: bottom; max-width: 100%;"></div><div><br></div><div><b>3.分配新的指针所有权</b></div></div><div><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">&nbsp; &nbsp;可以调用reset来重新分配指针的所有权，reset中会先释放原来的内部指针的内存，然后分配新的内部指针。</span><br></div><div data-mode="C++" data-theme="base16-light" id="wiz_cm_1525066700354_6891" class="wiz-code-container"><textarea style="display:none;">void foo_reset()
{
	//释放
	int* pNew = new int(3);
	int*p = new int(5);
	{
		std::auto_ptr&lt;int&gt; aptr(pNew);
		aptr.reset(p);

	}
}</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525066680960_6369"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 228.682px; left: 40.2853px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 237px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>11</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 11.2908px; top: 208.696px; height: 20.8696px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_reset</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//释放</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">int*</span> <span class="cm-variable">pNew</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">int*</span><span class="cm-variable">p</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr</span>(<span class="cm-variable">pNew</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">aptr</span>.<span class="cm-variable">reset</span>(<span class="cm-variable">p</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>}</span></pre></div><div class="CodeMirror-activeline" style="position: relative;"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 237px;"></div><div class="CodeMirror-gutters" style="height: 267px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><div><br></div><div><img src="index_files/e27b7ded-221d-4340-ae56-dc3dbe836b9e.png" style="vertical-align: bottom; max-width: 100%;"></div><div><br></div><div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><div style="margin:0px;"><b>4.=运算符的使用</b></div></div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">&nbsp; &nbsp;</span></div></div></div><div id="wiz_cm_1525067171369_2027" class="wiz-code-container" data-mode="C++" data-theme="base16-light"><textarea style="display:none;">void foo_reset()
{
	//释放
	int* pNew = new int(3);
	int*p = new int(5);
	{
		std::auto_ptr&lt;int&gt; aptr(pNew);
		aptr.reset(p);

	}
}</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525067171369_2027"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 166.073px; left: 113.342px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 237px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>11</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 84.3478px; top: 146.087px; height: 20.8696px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_reset</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//释放</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">int*</span> <span class="cm-variable">pNew</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">int*</span><span class="cm-variable">p</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr</span>(<span class="cm-variable">pNew</span>);</span></pre></div><div class="CodeMirror-activeline" style="position: relative;"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">aptr</span>.<span class="cm-variable">reset</span>(<span class="cm-variable">p</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 237px;"></div><div class="CodeMirror-gutters" style="height: 267px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;"><br></span></div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><span style="color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;display:inline !important;">这里在使用=号赋值运算后，原来p1放弃了内部指针的拥有权，交给p2指针了。</span></div><div style="margin:0px;color:rgb(0, 0, 0);font-family:Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><div><img src="index_files/078e5232-f8ec-4783-9e68-a8eb3d1a7ff9.png" style="vertical-align: bottom; max-width: 100%;"></div><div><br></div><div>了解了基本用法，直接上stl中的源码，其实其本质很简单，与我们的写法很类似：</div></div><div id="wiz_cm_1525067903283_3611" class="wiz-code-container" data-mode="C++" data-theme="base16-light"><textarea style="display:none;">template&lt;class _Ty&gt;
	class auto_ptr;

template&lt;class _Ty&gt;
	struct auto_ptr_ref
		{	// proxy reference for auto_ptr copying
	explicit auto_ptr_ref(_Ty *_Right)
		: _Ref(_Right)
		{	// construct from generic pointer to auto_ptr ptr
		}

	_Ty *_Ref;	// generic pointer to auto_ptr ptr
	};

template&lt;class _Ty&gt;
	class auto_ptr
		{	// wrap an object pointer to ensure destruction
public:
	typedef auto_ptr&lt;_Ty&gt; _Myt;
	typedef _Ty element_type;

	explicit auto_ptr(_Ty *_Ptr = 0) _THROW0()
		: _Myptr(_Ptr)
		{	// construct from object pointer
		}

	auto_ptr(_Myt&amp; _Right) _THROW0()
		: _Myptr(_Right.release())
		{	// construct by assuming pointer from _Right auto_ptr
		}

	auto_ptr(auto_ptr_ref&lt;_Ty&gt; _Right) _THROW0()
		{	// construct by assuming pointer from _Right auto_ptr_ref
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	// release old
		_Myptr = _Ptr;	// reset this
		}

	template&lt;class _Other&gt;
		operator auto_ptr&lt;_Other&gt;() _THROW0()
		{	// convert to compatible auto_ptr
		return (auto_ptr&lt;_Other&gt;(*this));
		}

	template&lt;class _Other&gt;
		operator auto_ptr_ref&lt;_Other&gt;() _THROW0()
		{	// convert to compatible auto_ptr_ref
		_Other *_Cvtptr = _Myptr;	// test implicit conversion
		auto_ptr_ref&lt;_Other&gt; _Ans(_Cvtptr);
		_Myptr = 0;	// pass ownership to auto_ptr_ref
		return (_Ans);
		}

	template&lt;class _Other&gt;
		_Myt&amp; operator=(auto_ptr&lt;_Other&gt;&amp; _Right) _THROW0()
		{	// assign compatible _Right (assume pointer)
		reset(_Right.release());
		return (*this);
		}

	template&lt;class _Other&gt;
		auto_ptr(auto_ptr&lt;_Other&gt;&amp; _Right) _THROW0()
		: _Myptr(_Right.release())
		{	// construct by assuming pointer from _Right
		}

	_Myt&amp; operator=(_Myt&amp; _Right) _THROW0()
		{	// assign compatible _Right (assume pointer)
		reset(_Right.release());
		return (*this);
		}

	_Myt&amp; operator=(auto_ptr_ref&lt;_Ty&gt; _Right) _THROW0()
		{	// assign compatible _Right._Ref (assume pointer)
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	// release old
		reset(_Ptr);	// set new
		return (*this);
		}

	~auto_ptr() _NOEXCEPT
		{	// destroy the object
		delete _Myptr;
		}

	_Ty&amp; operator*() const _THROW0()
		{	// return designated value
 #if _ITERATOR_DEBUG_LEVEL == 2
		if (_Myptr == 0)
			_DEBUG_ERROR("auto_ptr not dereferencable");
 #endif /* _ITERATOR_DEBUG_LEVEL == 2 */

		return (*get());
		}

	_Ty *operator-&gt;() const _THROW0()
		{	// return pointer to class object
 #if _ITERATOR_DEBUG_LEVEL == 2
		if (_Myptr == 0)
			_DEBUG_ERROR("auto_ptr not dereferencable");
 #endif /* _ITERATOR_DEBUG_LEVEL == 2 */

		return (get());
		}

	_Ty *get() const _THROW0()
		{	// return wrapped pointer
		return (_Myptr);
		}

	_Ty *release() _THROW0()
		{	// return wrapped pointer and give up ownership
		_Ty *_Tmp = _Myptr;
		_Myptr = 0;
		return (_Tmp);
		}

	void reset(_Ty *_Ptr = 0)
		{	// destroy designated object and store new pointer
		if (_Ptr != _Myptr)
			delete _Myptr;
		_Myptr = _Ptr;
		}

private:
	_Ty *_Myptr;	// the wrapped object pointer
	};
_STD_END</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525067903283_3611"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 19.9864px; left: 35.3397px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 31px; margin-bottom: 0px; border-right-width: 30px; min-height: 2679px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>128</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors" style="visibility: hidden;"><div class="CodeMirror-cursor" style="left: 4.34783px; top: 0px; height: 20.8696px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;" class="CodeMirror-activeline"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -31px; width: 31px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">template</span><span class="cm-operator">&lt;</span><span class="cm-keyword">class</span> <span class="cm-def">_Ty</span><span class="cm-operator">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">class</span> <span class="cm-def">auto_ptr</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">template</span><span class="cm-operator">&lt;</span><span class="cm-keyword">class</span> <span class="cm-def">_Ty</span><span class="cm-operator">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">struct</span> <span class="cm-def">auto_ptr_ref</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// proxy reference for auto_ptr copying</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">explicit</span> <span class="cm-variable">auto_ptr_ref</span>(<span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">_Right</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>: <span class="cm-variable">_Ref</span>(<span class="cm-variable">_Right</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// construct from generic pointer to auto_ptr ptr</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">12</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">_Ref</span>;<span class="cm-tab">  </span><span class="cm-comment">// generic pointer to auto_ptr ptr</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">13</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>};</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">14</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">15</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">template</span><span class="cm-operator">&lt;</span><span class="cm-keyword">class</span> <span class="cm-def">_Ty</span><span class="cm-operator">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">16</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">class</span> <span class="cm-def">auto_ptr</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">17</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// wrap an object pointer to ensure destruction</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">18</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">public</span>:</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">19</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">typedef</span> <span class="cm-variable">auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-variable">_Ty</span><span class="cm-operator">&gt;</span> <span class="cm-variable">_Myt</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">20</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">typedef</span> <span class="cm-variable">_Ty</span> <span class="cm-variable">element_type</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">21</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">22</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">explicit</span> <span class="cm-variable">auto_ptr</span>(<span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">_Ptr</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>) <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">23</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>: <span class="cm-variable">_Myptr</span>(<span class="cm-variable">_Ptr</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">24</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// construct from object pointer</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">25</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">26</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">27</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">auto_ptr</span>(<span class="cm-variable">_Myt</span><span class="cm-operator">&amp;</span> <span class="cm-variable">_Right</span>) <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">28</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>: <span class="cm-variable">_Myptr</span>(<span class="cm-variable">_Right</span>.<span class="cm-variable">release</span>())</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">29</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// construct by assuming pointer from _Right auto_ptr</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">30</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">31</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">32</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">auto_ptr</span>(<span class="cm-variable">auto_ptr_ref</span><span class="cm-operator">&lt;</span><span class="cm-variable">_Ty</span><span class="cm-operator">&gt;</span> <span class="cm-variable">_Right</span>) <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">33</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// construct by assuming pointer from _Right auto_ptr_ref</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">34</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">_Ptr</span> <span class="cm-operator">=</span> <span class="cm-variable">_Right</span>.<span class="cm-variable">_Ref</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">35</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Right</span>.<span class="cm-variable">_Ref</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>;<span class="cm-tab">    </span><span class="cm-comment">// release old</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">36</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Myptr</span> <span class="cm-operator">=</span> <span class="cm-variable">_Ptr</span>;<span class="cm-tab">  </span><span class="cm-comment">// reset this</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">37</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">38</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">39</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">template</span><span class="cm-operator">&lt;</span><span class="cm-keyword">class</span> <span class="cm-def">_Other</span><span class="cm-operator">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">40</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">operator</span> <span class="cm-variable">auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-variable">_Other</span><span class="cm-operator">&gt;</span>() <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">41</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// convert to compatible auto_ptr</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">42</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> (<span class="cm-variable">auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-variable">_Other</span><span class="cm-operator">&gt;</span>(<span class="cm-operator">*</span><span class="cm-keyword">this</span>));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">43</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">44</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">45</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">template</span><span class="cm-operator">&lt;</span><span class="cm-keyword">class</span> <span class="cm-def">_Other</span><span class="cm-operator">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">46</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">operator</span> <span class="cm-variable">auto_ptr_ref</span><span class="cm-operator">&lt;</span><span class="cm-variable">_Other</span><span class="cm-operator">&gt;</span>() <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">47</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// convert to compatible auto_ptr_ref</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">48</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Other</span> <span class="cm-operator">*</span><span class="cm-variable">_Cvtptr</span> <span class="cm-operator">=</span> <span class="cm-variable">_Myptr</span>;<span class="cm-tab">   </span><span class="cm-comment">// test implicit conversion</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">49</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">auto_ptr_ref</span><span class="cm-operator">&lt;</span><span class="cm-variable">_Other</span><span class="cm-operator">&gt;</span> <span class="cm-variable">_Ans</span>(<span class="cm-variable">_Cvtptr</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">50</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Myptr</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>;<span class="cm-tab"> </span><span class="cm-comment">// pass ownership to auto_ptr_ref</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">51</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> (<span class="cm-variable">_Ans</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">52</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">53</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">54</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">template</span><span class="cm-operator">&lt;</span><span class="cm-keyword">class</span> <span class="cm-def">_Other</span><span class="cm-operator">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">55</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Myt</span><span class="cm-operator">&amp;</span> <span class="cm-keyword">operator</span><span class="cm-operator">=</span>(<span class="cm-variable">auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-variable">_Other</span><span class="cm-operator">&gt;&amp;</span> <span class="cm-variable">_Right</span>) <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">56</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// assign compatible _Right (assume pointer)</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">57</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">reset</span>(<span class="cm-variable">_Right</span>.<span class="cm-variable">release</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">58</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> (<span class="cm-operator">*</span><span class="cm-keyword">this</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">59</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">60</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">61</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">template</span><span class="cm-operator">&lt;</span><span class="cm-keyword">class</span> <span class="cm-def">_Other</span><span class="cm-operator">&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">62</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">auto_ptr</span>(<span class="cm-variable">auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-variable">_Other</span><span class="cm-operator">&gt;&amp;</span> <span class="cm-variable">_Right</span>) <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">63</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>: <span class="cm-variable">_Myptr</span>(<span class="cm-variable">_Right</span>.<span class="cm-variable">release</span>())</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">64</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// construct by assuming pointer from _Right</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">65</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">66</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">67</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">_Myt</span><span class="cm-operator">&amp;</span> <span class="cm-keyword">operator</span><span class="cm-operator">=</span>(<span class="cm-variable">_Myt</span><span class="cm-operator">&amp;</span> <span class="cm-variable">_Right</span>) <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">68</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// assign compatible _Right (assume pointer)</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">69</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">reset</span>(<span class="cm-variable">_Right</span>.<span class="cm-variable">release</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">70</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> (<span class="cm-operator">*</span><span class="cm-keyword">this</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">71</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">72</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">73</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">_Myt</span><span class="cm-operator">&amp;</span> <span class="cm-keyword">operator</span><span class="cm-operator">=</span>(<span class="cm-variable">auto_ptr_ref</span><span class="cm-operator">&lt;</span><span class="cm-variable">_Ty</span><span class="cm-operator">&gt;</span> <span class="cm-variable">_Right</span>) <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">74</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// assign compatible _Right._Ref (assume pointer)</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">75</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">_Ptr</span> <span class="cm-operator">=</span> <span class="cm-variable">_Right</span>.<span class="cm-variable">_Ref</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">76</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Right</span>.<span class="cm-variable">_Ref</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>;<span class="cm-tab">    </span><span class="cm-comment">// release old</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">77</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">reset</span>(<span class="cm-variable">_Ptr</span>);<span class="cm-tab">    </span><span class="cm-comment">// set new</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">78</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> (<span class="cm-operator">*</span><span class="cm-keyword">this</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">79</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">80</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">81</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">~auto_ptr</span>() <span class="cm-variable">_NOEXCEPT</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">82</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// destroy the object</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">83</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">delete</span> <span class="cm-variable">_Myptr</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">84</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">85</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">86</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">_Ty</span><span class="cm-operator">&amp;</span> <span class="cm-keyword">operator</span><span class="cm-operator">*</span>() <span class="cm-keyword">const</span> <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">87</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// return designated value</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">88</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> <span class="cm-meta">#if _ITERATOR_DEBUG_LEVEL == 2</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">89</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">if</span> (<span class="cm-variable">_Myptr</span> <span class="cm-operator">==</span> <span class="cm-number">0</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">90</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_DEBUG_ERROR</span>(<span class="cm-string">"auto_ptr not dereferencable"</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">91</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> <span class="cm-meta">#endif </span><span class="cm-comment">/* _ITERATOR_DEBUG_LEVEL == 2 */</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">92</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">93</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> (<span class="cm-operator">*</span><span class="cm-variable">get</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">94</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">95</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">96</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-keyword">operator</span><span class="cm-operator">-&gt;</span>() <span class="cm-keyword">const</span> <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">97</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// return pointer to class object</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">98</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> <span class="cm-meta">#if _ITERATOR_DEBUG_LEVEL == 2</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">99</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">if</span> (<span class="cm-variable">_Myptr</span> <span class="cm-operator">==</span> <span class="cm-number">0</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">100</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_DEBUG_ERROR</span>(<span class="cm-string">"auto_ptr not dereferencable"</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">101</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"> <span class="cm-meta">#endif </span><span class="cm-comment">/* _ITERATOR_DEBUG_LEVEL == 2 */</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">102</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">103</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> (<span class="cm-variable">get</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">104</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">105</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">106</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">get</span>() <span class="cm-keyword">const</span> <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">107</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// return wrapped pointer</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">108</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> (<span class="cm-variable">_Myptr</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">109</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">110</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">111</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">release</span>() <span class="cm-variable">_THROW0</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">112</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// return wrapped pointer and give up ownership</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">113</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">_Tmp</span> <span class="cm-operator">=</span> <span class="cm-variable">_Myptr</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">114</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Myptr</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">115</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">return</span> (<span class="cm-variable">_Tmp</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">116</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">117</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">118</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">void</span> <span class="cm-variable">reset</span>(<span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">_Ptr</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">119</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>{<span class="cm-tab">   </span><span class="cm-comment">// destroy designated object and store new pointer</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">120</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">if</span> (<span class="cm-variable">_Ptr</span> <span class="cm-operator">!=</span> <span class="cm-variable">_Myptr</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">121</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-keyword">delete</span> <span class="cm-variable">_Myptr</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">122</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">_Myptr</span> <span class="cm-operator">=</span> <span class="cm-variable">_Ptr</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">123</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">124</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">125</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">private</span>:</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">126</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">_Ty</span> <span class="cm-operator">*</span><span class="cm-variable">_Myptr</span>;<span class="cm-tab">    </span><span class="cm-comment">// the wrapped object pointer</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">127</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>};</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -31px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 23px;">128</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-variable">_STD_END</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 2679px;"></div><div class="CodeMirror-gutters" style="height: 2709px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 31px;"></div></div></div></div></wiz_code_mirror></div><div style="margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif; font-size: 1rem; font-style: normal; text-align: start; text-indent: 0px;"><div style="font-weight: normal;"><br></div><div style="font-weight: normal;"><br></div><div style="font-weight: normal;">上面这里是auto_ptr的基本用法，但是为什么11标准会不让使用auto_ptr，原因是其使用有问题：</div><div><b>1. 作为参数传递会存在问题。</b></div><div style="font-weight: normal;">因为有拷贝构造和赋值的情况下，会释放原有的对象的内部指针，所以当有函数使用的是auto_ptr时，调用后会导致原来的内部指针释放..</div><div style="font-weight: normal;"><br></div></div><div id="wiz_cm_1525069024778_4421" class="wiz-code-container" data-mode="C++" data-theme="base16-light"><textarea style="display:none;">void foo_test(std::auto_ptr&lt;int&gt; p)
{
	printf("%d\r\n", *p);
}

int _tmain(int argc, _TCHAR* argv[])
{
	std::auto_ptr&lt;int&gt; p1 = std::auto_ptr&lt;int&gt;(new int(3));
	foo_test(p1);

	//这里的调用就会出错，因为拷贝构造函数的存在，p1实际上已经释放了其内部指针的所有权了
	printf("%d\r\n", *p1);
	
	return 0;
}</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525069024778_4421"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 312.16px; left: 40.2853px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 321px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>15</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 11.2908px; top: 292.174px; height: 20.8696px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_test</span>(<span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">p</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"%d\r\n"</span>, <span class="cm-operator">*</span><span class="cm-variable">p</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">int</span> <span class="cm-def">_tmain</span>(<span class="cm-type">int</span> <span class="cm-variable">argc</span>, <span class="cm-variable">_TCHAR</span><span class="cm-operator">*</span> <span class="cm-variable">argv</span>[])</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">p1</span> <span class="cm-operator">=</span> <span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span>(<span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">foo_test</span>(<span class="cm-variable">p1</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//这里的调用就会出错，因为拷贝构造函数的存在，p1实际上已经释放了其内部指针的所有权了</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"%d\r\n"</span>, <span class="cm-operator">*</span><span class="cm-variable">p1</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line"><span class="cm-tab-wrap-hack" style="padding-right: 0.1px;"><span class="cm-tab">    </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">return</span> <span class="cm-number">0</span>;</span></pre></div><div class="CodeMirror-activeline" style="position: relative;"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">15</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 321px;"></div><div class="CodeMirror-gutters" style="height: 351px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div style="margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif; font-size: 1rem; font-style: normal; text-align: start; text-indent: 0px;"><div style="font-weight: normal;"><br></div><div><b>2. 不能使用vector数组：</b></div><div style="font-weight: normal;">因为数组的实现，所以这么定义会出错：</div></div><div id="wiz_cm_1525069311466_6877" class="wiz-code-container" data-mode="C++" data-theme="base16-light"><textarea style="display:none;">void foo_ary()
{
	std::vector&lt;std::auto_ptr&lt;int&gt;&gt; Ary;
	std::auto_ptr&lt;int&gt; p(new int(3));
	Ary.push_back(p);

	printf("%d\r\n", *p);

}</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525069311466_6877"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 19.9864px; left: 33.3424px;"><div><img src="index_files/d99bbd55-eab6-45cc-819e-cac1c2c4d63c.png" style="vertical-align: bottom; max-width: 100%;"></div><div><br></div><div><br></div><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 196px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>10</div></div><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>9</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors" style="visibility: hidden;"><div class="CodeMirror-cursor" style="left: 4.34782px; top: 0px; height: 20.8696px;">&nbsp;</div></div><div class="CodeMirror-code"><div class="CodeMirror-activeline" style="position: relative;"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_ary</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::vector</span><span class="cm-operator">&lt;</span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;&gt;</span> <span class="cm-variable">Ary</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">p</span>(<span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">Ary</span>.<span class="cm-variable">push_back</span>(<span class="cm-variable">p</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"%d\r\n"</span>, <span class="cm-operator">*</span><span class="cm-variable">p</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 196px;"></div><div class="CodeMirror-gutters" style="height: 226px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div>会直接报错：</div><div><div><img src="index_files/4f936add-d58d-4ea6-8bc4-5e02d446d849.png" style="vertical-align: bottom; max-width: 100%;"></div><div><br></div><div>上面所有例子中的代码如下：</div></div><div id="wiz_cm_1525069358242_3743" class="wiz-code-container" data-mode="C++" data-theme="base16-light"><textarea style="display:none;">// TestAutoPtr.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;vector&gt;
using namespace std;

void foo_construct()
{
	//通过指针进行构造
	std::auto_ptr&lt;int&gt; aptr(new int(3));

	printf("aptr %p : %d\r\n", aptr.get(), *aptr);
	//这样会编译出错，因为auto_ptr的构造有关键字explicit
	//explicit关键字表示调用构造函数时不能使用隐式赋值，而必须是显示调用
	//std::auto_ptr&lt;int&gt; aptr2 = new int(3); 

	//可以用其他的auto_ptr指针进行初始化
	std::auto_ptr&lt;int&gt; aptr2 = aptr;
	printf("aptr2 %p : %d\r\n", aptr2.get(), *aptr2);

	//但是这么做就悲剧了,因为后面就不能使用aptr了。
	//*aptr = 4;
	printf("aptr %p\r\n", aptr.get());
}

void foo_release()
{
	//释放
	int* pNew = new int(3);
	{
		std::auto_ptr&lt;int&gt; aptr(pNew);
		int* p = aptr.release();
	}
}

void foo_reset()
{
	//释放
	int* pNew = new int(3);
	int*p = new int(5);
	{
		std::auto_ptr&lt;int&gt; aptr(pNew);
		aptr.reset(p);

	}
}

void foo_assign()
{
	std::auto_ptr&lt;int&gt; p1;
	std::auto_ptr&lt;int&gt; p2;

	p1 = std::auto_ptr&lt;int&gt;(new int(3));
	*p1 = 4;
	p2 = p1;
}

void foo_test(std::auto_ptr&lt;int&gt; p)
{
	printf("%d\r\n", *p);
}

void foo_ary()
{
	std::vector&lt;std::auto_ptr&lt;int&gt;&gt; Ary;
	std::auto_ptr&lt;int&gt; p(new int(3));
	Ary.push_back(p);

	printf("%d\r\n", *p);

}

int _tmain(int argc, _TCHAR* argv[])
{

	foo_ary();
	std::auto_ptr&lt;int&gt; p1 = std::auto_ptr&lt;int&gt;(new int(3));
	foo_test(p1);

	//这里的调用就会出错，因为拷贝构造函数的存在，p1实际上已经释放了其内部指针的所有权了
	printf("%d\r\n", *p1);
	
	return 0;
}</textarea><wiz_code_mirror><div class="CodeMirror CodeMirror-wrap cm-s-base16-light" data-id="wiz_cm_1525069358242_3743"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 1814.77px; left: 40.2853px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="padding:0px; width:1000px; height:1em;" tabindex="0"></textarea></div><div class="CodeMirror-scrollbar-filler"></div><div class="CodeMirror-gutter-filler"></div><div class="CodeMirror-scroll"><div class="CodeMirror-sizer" style="margin-left: 29px; margin-bottom: 0px; border-right-width: 30px; min-height: 1823px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines"><div style="position: relative; outline: none;"><div class="CodeMirror-measure"><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>89</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="wiz-hide wiz_CodeMirror-cursors" style="visibility: hidden;"><div class="CodeMirror-cursor" style="left: 11.2908px; top: 1794.78px; height: 20.8696px;">&nbsp;</div></div><div class="CodeMirror-code"><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">1</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">// TestAutoPtr.cpp : 定义控制台应用程序的入口点。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">2</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-comment">//</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">3</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">4</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-meta">#include "stdafx.h"</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">5</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;iostream&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">6</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;memory&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">7</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;vector&gt;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">8</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-keyword">using</span> <span class="cm-keyword">namespace</span> <span class="cm-def">std</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">9</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">10</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_construct</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">11</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">12</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//通过指针进行构造</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">13</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr</span>(<span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">14</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">15</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"aptr %p : %d\r\n"</span>, <span class="cm-variable">aptr</span>.<span class="cm-variable">get</span>(), <span class="cm-operator">*</span><span class="cm-variable">aptr</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">16</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//这样会编译出错，因为auto_ptr的构造有关键字explicit</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">17</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//explicit关键字表示调用构造函数时不能使用隐式赋值，而必须是显示调用</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">18</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//std::auto_ptr&lt;int&gt; aptr2 = new int(3); </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">19</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">20</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//可以用其他的auto_ptr指针进行初始化</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">21</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr2</span> <span class="cm-operator">=</span> <span class="cm-variable">aptr</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">22</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"aptr2 %p : %d\r\n"</span>, <span class="cm-variable">aptr2</span>.<span class="cm-variable">get</span>(), <span class="cm-operator">*</span><span class="cm-variable">aptr2</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">23</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">24</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//但是这么做就悲剧了,因为后面就不能使用aptr了。</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">25</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//*aptr = 4;</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">26</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"aptr %p\r\n"</span>, <span class="cm-variable">aptr</span>.<span class="cm-variable">get</span>());</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">27</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">28</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">29</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_release</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">30</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">31</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//释放</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">32</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">int*</span> <span class="cm-variable">pNew</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">33</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">34</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr</span>(<span class="cm-variable">pNew</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">35</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-type">int*</span> <span class="cm-variable">p</span> <span class="cm-operator">=</span> <span class="cm-variable">aptr</span>.<span class="cm-variable">release</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">36</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">37</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">38</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">39</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_reset</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">40</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">41</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//释放</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">42</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">int*</span> <span class="cm-variable">pNew</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">43</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-type">int*</span><span class="cm-variable">p</span> <span class="cm-operator">=</span> <span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">5</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">44</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">45</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">aptr</span>(<span class="cm-variable">pNew</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">46</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-tab">    </span><span class="cm-variable">aptr</span>.<span class="cm-variable">reset</span>(<span class="cm-variable">p</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">47</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">48</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span>}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">49</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">50</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">51</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_assign</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">52</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">53</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">p1</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">54</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">p2</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">55</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">56</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">p1</span> <span class="cm-operator">=</span> <span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span>(<span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">57</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-operator">*</span><span class="cm-variable">p1</span> <span class="cm-operator">=</span> <span class="cm-number">4</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">58</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">p2</span> <span class="cm-operator">=</span> <span class="cm-variable">p1</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">59</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">60</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">61</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_test</span>(<span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">p</span>)</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">62</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">63</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"%d\r\n"</span>, <span class="cm-operator">*</span><span class="cm-variable">p</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">64</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">65</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">66</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">foo_ary</span>()</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">67</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">{</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">68</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::vector</span><span class="cm-operator">&lt;</span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;&gt;</span> <span class="cm-variable">Ary</span>;</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">69</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">p</span>(<span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">70</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">Ary</span>.<span class="cm-variable">push_back</span>(<span class="cm-variable">p</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">71</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">72</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"%d\r\n"</span>, <span class="cm-operator">*</span><span class="cm-variable">p</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">73</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">74</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;">}</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">75</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">76</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-type">int</span> <span class="cm-def">_tmain</span>(<span class="cm-type">int</span> <span class="cm-variable">argc</span>, <span class="cm-variable">_TCHAR</span><span class="cm-operator">*</span> <span class="cm-variable">argv</span>[])</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">77</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span>{</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">78</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">79</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">foo_ary</span>();</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">80</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">p1</span> <span class="cm-operator">=</span> <span class="cm-variable">std::auto_ptr</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span>(<span class="cm-keyword">new</span> <span class="cm-type">int</span>(<span class="cm-number">3</span>));</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">81</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">foo_test</span>(<span class="cm-variable">p1</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">82</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span></span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">83</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-comment">//这里的调用就会出错，因为拷贝构造函数的存在，p1实际上已经释放了其内部指针的所有权了</span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">84</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-variable">printf</span>(<span class="cm-string">"%d\r\n"</span>, <span class="cm-operator">*</span><span class="cm-variable">p1</span>);</span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">85</div></div><pre class="CodeMirror-line"><span class="cm-tab-wrap-hack" style="padding-right: 0.1px;"><span class="cm-tab">    </span></span></pre></div><div style="position: relative;"><div class="CodeMirror-gutter-wrapper" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">86</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span class="cm-tab">    </span><span class="cm-keyword">return</span> <span class="cm-number">0</span>;</span></pre></div><div class="CodeMirror-activeline" style="position: relative;"><div class="wiz-hide wiz_CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: -29px; width: 29px;"></div><div class="CodeMirror-gutter-wrapper CodeMirror-activeline-gutter" style="left: -29px;"><div class="CodeMirror-linenumber CodeMirror-gutter-elt" style="left: 0px; width: 21px;">87</div></div><pre class="CodeMirror-line"><span style="padding-right: 0.1px;"><span>}</span></span></pre></div></div></div></div></div></div><div style="position: absolute; height: 13px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 1823px;"></div><div class="CodeMirror-gutters" style="height: 1853px;"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 29px;"></div></div></div></div></wiz_code_mirror></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;"><br></span></div><div><span style="color: inherit; font-size: 1rem; line-height: 1.6;">&nbsp; &nbsp;&nbsp;</span></div><blockquote style="margin: 0 0 0 40px; border: none; padding: 0px;"><div id="I_type" style="color:rgb(0, 0, 0);font-family:Simsun;font-size:1rem;font-style:normal;font-weight:normal;text-align:start;text-indent:0px;"><br></div></blockquote></body></html>